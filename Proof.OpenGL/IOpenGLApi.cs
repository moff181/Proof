namespace Proof.OpenGL
{
    public interface IOpenGLApi
    {
        void ActiveTexture(int texture);
        void AttachShader(uint program, uint shader);
        void BeginConditionalRender(uint id, int mode);
        void BeginQuery(int target, uint id);
        void BeginTransformFeedback(int primitiveMode);
        void BindAttribLocation(uint program, uint index, string name);
        void BindBuffer(int target, uint buffer);
        void BindBufferBase(int target, uint index, uint buffer);
        void BindBufferRange(int target, uint index, uint buffer, int offset, int size);
        void BindBufferRange(int target, uint index, uint buffer, long offset, long size);
        void BindFragDataLocation(uint program, uint color, string name);
        void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name);
        void BindFramebuffer(int target, uint framebuffer);
        void BindFramebuffer(uint framebuffer);
        void BindRenderbuffer(uint renderbuffer);
        void BindSampler(uint unit, uint sampler);
        void BindTexture(int target, uint texture);
        void BindVertexArray(uint array);
        void BlendColor(float red, float green, float blue, float alpha);
        void BlendEquation(int mode);
        void BlendEquationSeparate(int modeRGB, int modeAlpha);
        void BlendFunc(int srcFactor, int dstFactor);
        void BlendFuncSeparate(int sFactorRgb, int dFactorRgb, int sFactorAlpha, int dFactorAlpha);
        void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter);
        void BufferData(int target, int size, IntPtr data, int usage);
        unsafe void BufferData(int target, int size, void* data, int usage);
        void BufferSubData(int target, int offset, int size, IntPtr data);
        unsafe void BufferSubData(int target, int offset, int size, void* data);
        void BufferSubData(int target, long offset, long size, IntPtr data);
        unsafe void BufferSubData(int target, long offset, long size, void* data);
        int CheckFramebufferStatus(int target);
        void ClampColor(bool clamp);
        void Clear(uint mask);
        void ClearBufferfi(int buffer, int drawbuffer, float depth, int stencil);
        unsafe void ClearBufferfv(int buffer, int drawbuffer, float* value);
        void ClearBufferfv(int buffer, int drawbuffer, float[] value);
        unsafe void ClearBufferiv(int buffer, int drawbuffer, int* value);
        void ClearBufferiv(int buffer, int drawbuffer, int[] value);
        unsafe void ClearBufferuiv(int buffer, int drawbuffer, uint* value);
        void ClearBufferuiv(int buffer, int drawbuffer, uint[] value);
        void ClearColor(float red, float green, float blue, float alpha);
        void ClearDepth(double depth);
        void ClearStencil(int index);
        int ClientWaitSync(IntPtr sync, uint flags, ulong timeout);
        void ColorMask(bool red, bool green, bool blue, bool alpha);
        void ColorMaski(uint index, bool red, bool green, bool blue, bool alpha);
        void ColorP3ui(int type, uint color);
        unsafe void ColorP3uiv(int type, uint* color);
        void ColorP3uiv(int type, uint[] color);
        void ColorP4ui(int type, uint color);
        unsafe void ColorP4uiv(int type, uint* color);
        void ColorP4uiv(int type, uint[] color);
        void CompileShader(uint shader);
        void CompressedTexImage1D(int target, int level, int internalFormat, int width, int border, int imageSize, IntPtr data);
        unsafe void CompressedTexImage1D(int target, int level, int internalFormat, int width, int border, int imageSize, void* data);
        void CompressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, IntPtr data);
        unsafe void CompressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, void* data);
        void CompressedTexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int imageSize, IntPtr data);
        unsafe void CompressedTexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int imageSize, void* data);
        void CompressedTexSubImage1D(int target, int level, int xOffset, int width, int format, int imageSize, IntPtr data);
        unsafe void CompressedTexSubImage1D(int target, int level, int xOffset, int width, int format, int imageSize, void* data);
        void CompressedTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int imageSize, IntPtr data);
        unsafe void CompressedTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int imageSize, void* data);
        void CompressedTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int imageSize, IntPtr data);
        unsafe void CompressedTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int imageSize, void* data);
        void CopyBufferSubData(int readTarget, int writeTarget, int readOffset, int writeOffset, int size);
        void CopyBufferSubData(int readTarget, int writeTarget, long readOffset, long writeOffset, long size);
        void CopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border);
        void CopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border);
        void CopyTexSubImage1D(int target, int level, int xOffset, int x, int y, int width);
        void CopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height);
        void CopyTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int x, int y, int width, int height);
        uint CreateProgram();
        uint CreateShader(int type);
        void CullFace(int mode);
        void DeleteBuffer(uint buffer);
        unsafe void DeleteBuffers(int n, uint* buffers);
        void DeleteBuffers(uint[] buffers);
        void DeleteFramebuffer(uint buffer);
        unsafe void DeleteFramebuffers(int n, uint* buffers);
        void DeleteFramebuffers(uint[] buffers);
        void DeleteProgram(uint program);
        unsafe void DeleteQueries(int n, uint* ids);
        void DeleteQueries(uint[] ids);
        void DeleteQuery(uint id);
        void DeleteRenderbuffer(uint renderbuffer);
        unsafe void DeleteRenderbuffers(int n, uint* buffers);
        void DeleteRenderbuffers(uint[] buffers);
        void DeleteSampler(uint sampler);
        unsafe void DeleteSamplers(int count, uint* samplers);
        void DeleteSamplers(uint[] samplers);
        void DeleteShader(uint shader);
        void DeleteSync(IntPtr sync);
        void DeleteTexture(uint texture);
        unsafe void DeleteTextures(int n, uint* textures);
        void DeleteTextures(uint[] textures);
        void DeleteVertexArray(uint array);
        unsafe void DeleteVertexArrays(int n, uint* arrays);
        void DeleteVertexArrays(uint[] arrays);
        void DepthFunc(int func);
        void DepthMask(bool enabled);
        void DepthRange(double near, double far);
        void DetachShader(uint program, uint shader);
        void Disable(int cap);
        void Disablei(int target, uint index);
        void DisableVertexAttribArray(uint index);
        void DrawArrays(int mode, int first, int count);
        void DrawArraysInstanced(int mode, int first, int count, int instanceCount);
        void DrawBuffer(int buffer);
        unsafe void DrawBuffers(int n, int* buffers);
        void DrawBuffers(int[] buffers);
        void DrawElements(int mode, byte[] indices);
        unsafe void DrawElements(int mode, int count, int type, void* indices);
        void DrawElements(int mode, uint[] indices);
        void DrawElements(int mode, ushort[] indices);
        void DrawElementsBaseVertex(int mode, int count, byte[] indices, int baseVertex);
        unsafe void DrawElementsBaseVertex(int mode, int count, int type, void* indices, int baseVertex);
        void DrawElementsBaseVertex(int mode, int count, uint[] indices, int baseVertex);
        void DrawElementsBaseVertex(int mode, int count, ushort[] indices, int baseVertex);
        void DrawElementsInstanced(int mode, int count, byte[] indices, int instanceCount);
        unsafe void DrawElementsInstanced(int mode, int count, int type, void* indices, int instanceCount);
        void DrawElementsInstanced(int mode, int count, uint[] indices, int instanceCount);
        void DrawElementsInstanced(int mode, int count, ushort[] indices, int instanceCount);
        void DrawElementsInstancedBaseVertex(int mode, int count, byte[] indices, int instanceCount, int baseVertex);
        unsafe void DrawElementsInstancedBaseVertex(int mode, int count, int type, void* indices, int instanceCount, int baseVertex);
        void DrawElementsInstancedBaseVertex(int mode, int count, uint[] indices, int instanceCount, int baseVertex);
        void DrawElementsInstancedBaseVertex(int mode, int count, ushort[] indices, int instanceCount, int baseVertex);
        void DrawRangeElements(int mode, uint start, uint end, int count, byte[] indices);
        unsafe void DrawRangeElements(int mode, uint start, uint end, int count, int type, void* indices);
        void DrawRangeElements(int mode, uint start, uint end, int count, uint[] indices);
        void DrawRangeElements(int mode, uint start, uint end, int count, ushort[] indices);
        void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, byte[] indices, int baseVertex);
        unsafe void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, void* indices, int baseVertex);
        void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, uint[] indices, int baseVertex);
        void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, ushort[] indices, int baseVertex);
        void Enable(int cap);
        void Enablei(int target, uint index);
        void EnableVertexAttribArray(uint index);
        void EndConditionalRender();
        void EndQuery(int target);
        void EndTransformFeedback();
        IntPtr FenceSync(int condition, uint flags = 0);
        void Finish();
        void Flush();
        void FlushMappedBufferRange(int target, int offset, int length);
        void FlushMappedBufferRange(int target, long offset, long length);
        void FramebufferRenderbuffer(int target, int attachment, int renderbufferTarget, uint renderbuffer);
        void FramebufferRenderbuffer(int attachment, uint renderbuffer);
        void FramebufferTexture(int target, int attachment, uint texture, int level);
        void FramebufferTexture1D(int target, int attachment, int texTarget, uint texture, int level);
        void FramebufferTexture2D(int target, int attachment, int texTarget, uint texture, int level);
        void FramebufferTexture3D(int target, int attachment, int texTarget, uint texture, int level, int zOffset);
        void FramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer);
        void FrontFace(int mode);
        uint GenBuffer();
        uint[] GenBuffers(int n);
        unsafe void GenBuffers(int n, uint* buffers);
        void GenerateMipmap(int target);
        uint GenFramebuffer();
        uint[] GenFramebuffers(int n);
        unsafe void GenFramebuffers(int n, uint* buffers);
        uint[] GenQueries(int n);
        unsafe void GenQueries(int n, uint* ids);
        uint GenQuery();
        uint GenRenderbuffer();
        uint[] GenRenderbuffers(int n);
        unsafe void GenRenderbuffers(int n, uint* buffers);
        uint GenSampler();
        uint[] GenSamplers(int count);
        unsafe void GenSamplers(int count, uint* samplers);
        uint GenTexture();
        uint[] GenTextures(int n);
        unsafe void GenTextures(int n, uint* textures);
        uint GenVertexArray();
        uint[] GenVertexArrays(int n);
        unsafe void GenVertexArrays(int n, uint* arrays);
        void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name);
        void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name);
        int[] GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int count);
        unsafe void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* args);
        string GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize = 512);
        string GetActiveUniformName(uint program, uint uniformIndex, int bufSize = 512);
        unsafe void GetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* args);
        void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, int pname, int[] args);
        uint[] GetAttachedShaders(uint program, int maxCount);
        unsafe void GetAttachedShaders(uint program, int maxCount, int* count, uint* shaders);
        int GetAttribLocation(uint program, string name);
        bool GetBoolean(int paramName);
        bool GetBooleani(int target, uint index);
        unsafe void GetBooleani_v(int target, uint index, bool* data);
        bool[] GetBooleani_v(int target, uint index, int count);
        unsafe void GetBooleanv(int paramName, bool* data);
        bool[] GetBooleanv(int paramName, int count);
        long[] GetBufferParameteri64v(int target, int pname, int count);
        unsafe void GetBufferParameteri64v(int target, int pname, long* args);
        int[] GetBufferParameteriv(int target, int pname, int count);
        unsafe void GetBufferParameteriv(int target, int pname, int* args);
        IntPtr GetBufferPointerv(int target, int pname);
        void GetBufferSubData(int target, int offset, int size, IntPtr data);
        unsafe void GetBufferSubData(int target, int offset, int size, void* data);
        void GetBufferSubData(int target, long offset, long size, IntPtr data);
        unsafe void GetBufferSubData(int target, long offset, long size, void* data);
        void GetCompressedTexImage(int target, int level, IntPtr pixels);
        unsafe void GetCompressedTexImage(int target, int level, void* pixels);
        double GetDouble(int paramName);
        unsafe void GetDoublev(int paramName, double* data);
        double[] GetDoublev(int paramName, int count);
        int GetError();
        float GetFloat(int paramName);
        unsafe void GetFloatv(int paramName, float* data);
        float[] GetFloatv(int paramName, int count);
        int GetFragDataIndex(uint program, string name);
        int GetFragDataLocation(uint program, string name);
        int[] GetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int count);
        unsafe void GetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* args);
        int GetInteger(int paramName);
        long GetInteger64(int paramName);
        long GetInteger64i(int target, uint index);
        long[] GetInteger64i_v(int target, uint index, int count);
        unsafe void GetInteger64i_v(int target, uint index, long* data);
        long[] GetInteger64v(int paramName, int count);
        unsafe void GetInteger64v(int paramName, long* data);
        int GetIntegeri(int target, uint index);
        int[] GetIntegeri_v(int target, uint index, int count);
        unsafe void GetIntegeri_v(int target, uint index, int* data);
        int[] GetIntegerv(int paramName, int count);
        unsafe void GetIntegerv(int paramName, int* data);
        unsafe void GetMultisamplefv(int pname, uint index, float* val);
        float[] GetMultisamplefv(int pname, uint index, int count);
        string GetProgramInfoLog(uint program, int bufSize = 1024);
        int[] GetProgramiv(uint program, int pname, int count);
        unsafe void GetProgramiv(uint program, int pname, int* args);
        int[] GetQueryiv(int target, int pname, int count);
        unsafe void GetQueryiv(int target, int pname, int* args);
        long[] GetQueryObjecti64v(uint id, int pname, int count);
        unsafe void GetQueryObjecti64v(uint id, int pname, long* args);
        int[] GetQueryObjectiv(uint id, int pname, int count);
        unsafe void GetQueryObjectiv(uint id, int pname, int* args);
        ulong[] GetQueryObjectui64v(uint id, int pname, int count);
        unsafe void GetQueryObjectui64v(uint id, int pname, ulong* args);
        uint[] GetQueryObjectuiv(uint id, int pname, int count);
        unsafe void GetQueryObjectuiv(uint id, int pname, uint* args);
        unsafe void GetRenderbufferParameteriv(int target, int pname, int* args);
        void GetRenderbufferParameteriv(int target, int pname, int[] args);
        float GetSamplerParameterfv(uint sampler, int paramName);
        unsafe void GetSamplerParameterfv(uint sampler, int paramName, float* args);
        float[] GetSamplerParameterfv(uint sampler, int paramName, int count);
        int GetSamplerParameterIiv(uint sampler, int paramName);
        int[] GetSamplerParameterIiv(uint sampler, int paramName, int count);
        unsafe void GetSamplerParameterIiv(uint sampler, int paramName, int* args);
        uint GetSamplerParameterIui(uint sampler, int paramName);
        uint[] GetSamplerParameterIuiv(uint sampler, int paramName, int count);
        unsafe void GetSamplerParameterIuiv(uint sampler, int paramName, uint* args);
        int GetSamplerParameteriv(uint sampler, int paramName);
        int[] GetSamplerParameteriv(uint sampler, int paramName, int count);
        unsafe void GetSamplerParameteriv(uint sampler, int paramName, int* args);
        string GetShaderInfoLog(uint shader, int bufSize = 1024);
        int[] GetShaderiv(uint shader, int pname, int count);
        unsafe void GetShaderiv(uint shader, int pname, int* args);
        string GetShaderSource(uint shader, int bufSize = 4096);
        string GetString(int name);
        string GetStringi(int name, uint index);
        unsafe void GetSynciv(IntPtr sync, int pname, int bufSize, int* length, int* values);
        int[] GetSynciv(IntPtr sync, int pname, int count, out int length);
        void GetTexImage(int target, int level, int format, int type, IntPtr pixels);
        unsafe void GetTexImage(int target, int level, int format, int type, void* pixels);
        float GetTexLevelParameterf(int target, int level, int paramName);
        unsafe void GetTexLevelParameterfv(int target, int level, int paramName, float* args);
        float[] GetTexLevelParameterfv(int target, int level, int paramName, int count);
        int GetTexLevelParameteri(int target, int level, int paramName);
        int[] GetTexLevelParameteriv(int target, int level, int paramName, int count);
        unsafe void GetTexLevelParameteriv(int target, int level, int paramName, int* args);
        float GetTexParameterf(int target, int paramName);
        unsafe void GetTexParameterfv(int target, int paramName, float* args);
        float[] GetTexParameterfv(int target, int paramName, int count);
        int GetTexParameteri(int target, int paramName);
        int[] GetTexParameterIiv(int target, int pname, int count);
        unsafe void GetTexParameterIiv(int target, int pname, int* args);
        uint[] GetTexParameterIuiv(int target, int pname, int count);
        unsafe void GetTexParameterIuiv(int target, int pname, uint* args);
        int[] GetTexParameteriv(int target, int paramName, int count);
        unsafe void GetTexParameteriv(int target, int paramName, int* args);
        void GetTransformFeedbackVarying(uint program, uint index, out int size, out int type, out string name, int bufSize = 512);
        uint GetUniformBlockIndex(uint program, string uniformBlockName);
        unsafe void GetUniformfv(uint program, int location, float* args);
        float[] GetUniformfv(uint program, int location, int count);
        uint GetUniformIndex(uint program, string uniformName);
        int[] GetUniformiv(uint program, int location, int count);
        unsafe void GetUniformiv(uint program, int location, int* args);
        unsafe int GetUniformLocation(uint program, byte* name);
        int GetUniformLocation(uint program, byte[] name);
        int GetUniformLocation(uint program, string name);
        uint[] GetUniformuiv(uint program, int location, int count);
        unsafe void GetUniformuiv(uint program, int location, uint* args);
        unsafe void GetVertexAttribdv(uint index, int pname, double* args);
        double[] GetVertexAttribdv(uint index, int pname, int count);
        unsafe void GetVertexAttribfv(uint index, int pname, float* args);
        float[] GetVertexAttribfv(uint index, int pname, int count);
        int[] GetVertexAttribIiv(uint index, int pname, int count);
        unsafe void GetVertexAttribIiv(uint index, int pname, int* args);
        uint[] GetVertexAttribIuiv(uint index, int pname, int count);
        unsafe void GetVertexAttribIuiv(uint index, int pname, uint* args);
        int[] GetVertexAttribiv(uint index, int pname, int count);
        unsafe void GetVertexAttribiv(uint index, int pname, int* args);
        IntPtr GetVertexAttribPointerv(uint index, int pname);
        void Hint(int target, int mode);
        void Import(GetProcAddressHandler loader);
        bool IsBuffer(uint buffer);
        bool IsEnabled(int cap);
        bool IsEnabledi(int target, uint index);
        bool IsFramebuffer(uint framebuffer);
        bool IsProgram(uint program);
        bool IsQuery(uint id);
        bool IsRenderbuffer(uint renderbuffer);
        bool IsSampler(uint sampler);
        bool IsShader(uint shader);
        bool IsSync(IntPtr sync);
        bool IsTexture(uint texture);
        bool IsVertexArray(uint array);
        void LineWidth(float width);
        void LinkProgram(uint program);
        void LogicOp(int opcode);
        IntPtr MapBuffer(int target, int access);
        IntPtr MapBufferRange(int target, int offset, int length, uint access);
        IntPtr MapBufferRange(int target, long offset, long length, uint access);
        unsafe void MultiDrawArrays(int mode, int* first, int* count, int drawCount);
        void MultiDrawArrays(int mode, int[] first, int[] count, int drawCount);
        unsafe void MultiDrawElements(int mode, int* count, int type, void** indices, int drawCount);
        void MultiDrawElements(int mode, int[] count, int type, IntPtr indices, int drawCount);
        unsafe void MultiDrawElementsBaseVertex(int mode, int* count, int type, void** indices, int drawCount, int* baseVertex);
        void MultiTexCoordP1ui(int texture, int type, uint coords);
        unsafe void MultiTexCoordP1uiv(int texture, int type, uint* coords);
        void MultiTexCoordP1uiv(int texture, int type, uint[] coords);
        void MultiTexCoordP2ui(int texture, int type, uint coords);
        unsafe void MultiTexCoordP2uiv(int texture, int type, uint* coords);
        void MultiTexCoordP2uiv(int texture, int type, uint[] coords);
        void MultiTexCoordP3ui(int texture, int type, uint coords);
        unsafe void MultiTexCoordP3uiv(int texture, int type, uint* coords);
        void MultiTexCoordP3uiv(int texture, int type, uint[] coords);
        void MultiTexCoordP4ui(int texture, int type, uint coords);
        unsafe void MultiTexCoordP4uiv(int texture, int type, uint* coords);
        void MultiTexCoordP4uiv(int texture, int type, uint[] coords);
        void NormalP3ui(int type, uint coords);
        unsafe void NormalP3uiv(int type, uint* coords);
        void NormalP3uiv(int type, uint[] coords);
        void PixelStoref(int paramName, float param);
        void PixelStorei(int paramName, int param);
        void PointParameterf(int paramName, float param);
        unsafe void PointParameterfv(int paramName, float* args);
        void PointParameterfv(int paramName, float[] args);
        void PointParameteri(int paramName, int param);
        unsafe void PointParameteriv(int paramName, int* args);
        void PointParameteriv(int paramName, int[] args);
        void PointSize(float size);
        void PolygonMode(int face, int mode);
        void PolygonOffset(float factor, float units);
        void PrimitiveRestartIndex(uint index);
        void ProvokingVertex(int mode);
        void QueryCounter(uint id, int target);
        void ReadBuffer(int buffer);
        void ReadPixels(int x, int y, int width, int height, int format, int type, byte[] pixels);
        void ReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels);
        unsafe void ReadPixels(int x, int y, int width, int height, int format, int type, void* pixels);
        void RenderbufferStorage(int target, int internalFormat, int width, int height);
        void RenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height);
        void SampleCoverage(float value, bool invert);
        void SampleMaski(uint maskNumber, uint mask);
        void SamplerParameterf(uint sampler, int paramName, float param);
        unsafe void SamplerParameterfv(uint sampler, int paramName, float* param);
        void SamplerParameterfv(uint sampler, int paramName, float[] param);
        void SamplerParameteri(uint sampler, int paramName, int param);
        unsafe void SamplerParameterIiv(uint sampler, int paramName, int* param);
        void SamplerParameterIiv(uint sampler, int paramName, int[] param);
        unsafe void SamplerParameterIuiv(uint sampler, int paramName, uint* param);
        void SamplerParameterIuiv(uint sampler, int paramName, uint[] param);
        unsafe void SamplerParameteriv(uint sampler, int paramName, int* param);
        void SamplerParameteriv(uint sampler, int paramName, int[] param);
        void Scissor(int x, int y, int width, int height);
        void SecondaryColorP3ui(int type, uint color);
        unsafe void SecondaryColorP3uiv(int type, uint* color);
        void SecondaryColorP3uiv(int type, uint[] color);
        unsafe void ShaderSource(uint shader, int count, byte** str, int* length);
        void ShaderSource(uint shader, string source);
        void StencilFunc(int func, int reference, uint mask);
        void StencilFuncSeparate(int face, int func, int reference, uint mask);
        void StencilMask(uint mask);
        void StencilMaskSeparate(int face, uint mask);
        void StencilOp(int fail, int zfail, int zpass);
        void StencilOpSeparate(int face, int sfail, int dpfail, int dppass);
        void TexBuffer(int target, int internalFormat, uint buffer);
        void TexCoordP1ui(int type, uint coords);
        unsafe void TexCoordP1uiv(int type, uint* coords);
        void TexCoordP1uiv(int type, uint[] coords);
        void TexCoordP2ui(int type, uint coords);
        unsafe void TexCoordP2uiv(int type, uint* coords);
        void TexCoordP2uiv(int type, uint[] coords);
        void TexCoordP3ui(int type, uint coords);
        unsafe void TexCoordP3uiv(int type, uint* coords);
        void TexCoordP3uiv(int type, uint[] coords);
        void TexCoordP4ui(int type, uint coords);
        unsafe void TexCoordP4uiv(int type, uint* coords);
        void TexCoordP4uiv(int type, uint[] coords);
        void TexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, IntPtr pixels);
        unsafe void TexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, void* pixels);
        void TexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, IntPtr pixels);
        unsafe void TexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, void* pixels);
        void TexImage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations);
        void TexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, IntPtr pixels);
        unsafe void TexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, void* pixels);
        void TexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations);
        void TexParameterf(int target, int paramName, float param);
        unsafe void TexParameterfv(int target, int paramName, float* param);
        void TexParameterfv(int target, int paramName, float[] param);
        void TexParameteri(int target, int paramName, int param);
        unsafe void TexParameterIiv(int target, int pname, int* args);
        void TexParameterIiv(int target, int pname, int[] args);
        unsafe void TexParameterIuiv(int target, int pname, uint* args);
        void TexParameterIuiv(int target, int pname, uint[] args);
        unsafe void TexParameteriv(int target, int paramName, int* param);
        void TexParameteriv(int target, int paramName, int[] param);
        void TexSubImage1D(int target, int level, int xOffset, int width, int format, int type, IntPtr pixels);
        unsafe void TexSubImage1D(int target, int level, int xOffset, int width, int format, int type, void* pixels);
        void TexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, IntPtr pixels);
        unsafe void TexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, void* pixels);
        void TexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int type, IntPtr pixels);
        unsafe void TexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int type, void* pixels);
        unsafe void TransformFeedbackVaryings(uint program, int count, byte** varyings, int bufferMode);
        void Uniform1f(int location, float v0);
        unsafe void Uniform1fv(int location, int count, float* value);
        void Uniform1fv(int location, int count, float[] value);
        void Uniform1i(int location, int v0);
        unsafe void Uniform1iv(int location, int count, int* value);
        void Uniform1iv(int location, int count, int[] value);
        void Uniform1ui(int location, uint v0);
        unsafe void Uniform1uiv(int location, int count, uint* value);
        void Uniform1uiv(int location, int count, uint[] value);
        void Uniform2f(int location, float v0, float v1);
        unsafe void Uniform2fv(int location, int count, float* value);
        void Uniform2fv(int location, int count, float[] value);
        void Uniform2i(int location, int v0, int v1);
        unsafe void Uniform2iv(int location, int count, int* value);
        void Uniform2iv(int location, int count, int[] value);
        void Uniform2ui(int location, uint v0, uint v1);
        unsafe void Uniform2uiv(int location, int count, uint* value);
        void Uniform2uiv(int location, int count, uint[] value);
        void Uniform3f(int location, float v0, float v1, float v2);
        unsafe void Uniform3fv(int location, int count, float* value);
        void Uniform3fv(int location, int count, float[] value);
        void Uniform3i(int location, int v0, int v1, int v2);
        unsafe void Uniform3iv(int location, int count, int* value);
        void Uniform3iv(int location, int count, int[] value);
        void Uniform3ui(int location, uint v0, uint v1, uint v2);
        unsafe void Uniform3uiv(int location, int count, uint* value);
        void Uniform3uiv(int location, int count, uint[] value);
        void Uniform4f(int location, float v0, float v1, float v2, float v3);
        unsafe void Uniform4fv(int location, int count, float* value);
        void Uniform4fv(int location, int count, float[] value);
        void Uniform4i(int location, int v0, int v1, int v2, int v3);
        unsafe void Uniform4iv(int location, int count, int* value);
        void Uniform4iv(int location, int count, int[] value);
        void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        unsafe void Uniform4uiv(int location, int count, uint* value);
        void Uniform4uiv(int location, int count, uint[] value);
        void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        unsafe void UniformMatrix2fv(int location, int count, bool transpose, float* value);
        void UniformMatrix2fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix2x3fv(int location, int count, bool transpose, float* value);
        void UniformMatrix2x3fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix2x4fv(int location, int count, bool transpose, float* value);
        void UniformMatrix2x4fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix3fv(int location, int count, bool transpose, float* value);
        void UniformMatrix3fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix3x2fv(int location, int count, bool transpose, float* value);
        void UniformMatrix3x2fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix3x4fv(int location, int count, bool transpose, float* value);
        void UniformMatrix3x4fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix4fv(int location, int count, bool transpose, float* value);
        void UniformMatrix4fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix4x2fv(int location, int count, bool transpose, float* value);
        void UniformMatrix4x2fv(int location, int count, bool transpose, float[] values);
        unsafe void UniformMatrix4x3fv(int location, int count, bool transpose, float* value);
        void UniformMatrix4x3fv(int location, int count, bool transpose, float[] values);
        bool UnmapBuffer(int target);
        void UseProgram(uint program);
        void ValidateProgram(uint program);
        void VertexAttrib1d(uint index, double x);
        unsafe void VertexAttrib1dv(uint index, double* v);
        void VertexAttrib1dv(uint index, double[] value);
        void VertexAttrib1f(uint index, float x);
        unsafe void VertexAttrib1fv(uint index, float* v);
        void VertexAttrib1fv(uint index, float[] value);
        void VertexAttrib1s(uint index, short x);
        unsafe void VertexAttrib1sv(uint index, short* v);
        void VertexAttrib1sv(uint index, short[] value);
        void VertexAttrib2d(uint index, double x, double y);
        unsafe void VertexAttrib2dv(uint index, double* v);
        void VertexAttrib2dv(uint index, double[] value);
        void VertexAttrib2f(uint index, float x, float y);
        unsafe void VertexAttrib2fv(uint index, float* v);
        void VertexAttrib2fv(uint index, float[] value);
        void VertexAttrib2s(uint index, short x, short y);
        unsafe void VertexAttrib2sv(uint index, short* v);
        void VertexAttrib2sv(uint index, short[] value);
        void VertexAttrib3d(uint index, double x, double y, double z);
        unsafe void VertexAttrib3dv(uint index, double* v);
        void VertexAttrib3dv(uint index, double[] value);
        void VertexAttrib3f(uint index, float x, float y, float z);
        unsafe void VertexAttrib3fv(uint index, float* v);
        void VertexAttrib3fv(uint index, float[] value);
        void VertexAttrib3s(uint index, short x, short y, short z);
        unsafe void VertexAttrib3sv(uint index, short* v);
        void VertexAttrib3sv(uint index, short[] value);
        unsafe void VertexAttrib4bv(uint index, sbyte* v);
        void VertexAttrib4bv(uint index, sbyte[] value);
        void VertexAttrib4d(uint index, double x, double y, double z, double w);
        unsafe void VertexAttrib4dv(uint index, double* v);
        void VertexAttrib4dv(uint index, double[] value);
        void VertexAttrib4f(uint index, float x, float y, float z, float w);
        unsafe void VertexAttrib4fv(uint index, float* v);
        void VertexAttrib4fv(uint index, float[] value);
        unsafe void VertexAttrib4iv(uint index, int* v);
        void VertexAttrib4iv(uint index, int[] value);
        unsafe void VertexAttrib4Nbv(uint index, sbyte* v);
        void VertexAttrib4Nbv(uint index, sbyte[] value);
        unsafe void VertexAttrib4Niv(uint index, int* v);
        void VertexAttrib4Niv(uint index, int[] value);
        unsafe void VertexAttrib4Nsv(uint index, short* v);
        void VertexAttrib4Nsv(uint index, short[] value);
        void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
        unsafe void VertexAttrib4Nubv(uint index, byte* v);
        void VertexAttrib4Nubv(uint index, byte[] value);
        unsafe void VertexAttrib4Nuiv(uint index, uint* v);
        void VertexAttrib4Nuiv(uint index, uint[] value);
        unsafe void VertexAttrib4Nusv(uint index, ushort* v);
        void VertexAttrib4Nusv(uint index, ushort[] value);
        void VertexAttrib4s(uint index, short x, short y, short z, short w);
        unsafe void VertexAttrib4sv(uint index, short* v);
        void VertexAttrib4sv(uint index, short[] value);
        unsafe void VertexAttrib4ubv(uint index, byte* v);
        void VertexAttrib4ubv(uint index, byte[] value);
        unsafe void VertexAttrib4uiv(uint index, uint* v);
        void VertexAttrib4uiv(uint index, uint[] value);
        unsafe void VertexAttrib4usv(uint index, ushort* v);
        void VertexAttrib4usv(uint index, ushort[] value);
        void VertexAttribDivisor(uint index, uint divisor);
        void VertexAttribI1i(uint index, int x);
        unsafe void VertexAttribI1iv(uint index, int* v);
        void VertexAttribI1iv(uint index, int[] value);
        void VertexAttribI1ui(uint index, uint x);
        unsafe void VertexAttribI1uiv(uint index, uint* v);
        void VertexAttribI1uiv(uint index, uint[] value);
        void VertexAttribI2i(uint index, int x, int y);
        unsafe void VertexAttribI2iv(uint index, int* v);
        void VertexAttribI2iv(uint index, int[] value);
        void VertexAttribI2ui(uint index, uint x, uint y);
        unsafe void VertexAttribI2uiv(uint index, uint* v);
        void VertexAttribI2uiv(uint index, uint[] value);
        void VertexAttribI3i(uint index, int x, int y, int z);
        unsafe void VertexAttribI3iv(uint index, int* v);
        void VertexAttribI3iv(uint index, int[] value);
        void VertexAttribI3ui(uint index, uint x, uint y, uint z);
        unsafe void VertexAttribI3uiv(uint index, uint* v);
        void VertexAttribI3uiv(uint index, uint[] value);
        unsafe void VertexAttribI4bv(uint index, sbyte* v);
        void VertexAttribI4bv(uint index, sbyte[] value);
        void VertexAttribI4i(uint index, int x, int y, int z, int w);
        unsafe void VertexAttribI4iv(uint index, int* v);
        void VertexAttribI4iv(uint index, int[] value);
        unsafe void VertexAttribI4sv(uint index, short* v);
        void VertexAttribI4sv(uint index, short[] value);
        unsafe void VertexAttribI4ubv(uint index, byte* v);
        void VertexAttribI4ubv(uint index, byte[] value);
        void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        unsafe void VertexAttribI4uiv(uint index, uint* v);
        void VertexAttribI4uiv(uint index, uint[] value);
        unsafe void VertexAttribI4usv(uint index, ushort* v);
        void VertexAttribI4usv(uint index, ushort[] value);
        void VertexAttribIPointer(uint index, int size, int type, int stride, IntPtr pointer);
        unsafe void VertexAttribIPointer(uint index, int size, int type, int stride, void* pointer);
        void VertexAttribP1ui(uint index, int type, bool normalized, uint value);
        unsafe void VertexAttribP1uiv(uint index, int type, bool normalized, uint* value);
        void VertexAttribP1uiv(uint index, int type, bool normalized, uint[] value);
        void VertexAttribP2ui(uint index, int type, bool normalized, uint value);
        unsafe void VertexAttribP2uiv(uint index, int type, bool normalized, uint* value);
        void VertexAttribP2uiv(uint index, int type, bool normalized, uint[] value);
        void VertexAttribP3ui(uint index, int type, bool normalized, uint value);
        unsafe void VertexAttribP3uiv(uint index, int type, bool normalized, uint* value);
        void VertexAttribP3uiv(uint index, int type, bool normalized, uint[] value);
        void VertexAttribP4ui(uint index, int type, bool normalized, uint value);
        unsafe void VertexAttribP4uiv(uint index, int type, bool normalized, uint* value);
        void VertexAttribP4uiv(uint index, int type, bool normalized, uint[] value);
        void VertexAttribPointer(uint index, int size, int type, bool normalized, int stride, IntPtr pointer);
        unsafe void VertexAttribPointer(uint index, int size, int type, bool normalized, int stride, void* pointer);
        void VertexP2ui(int type, uint value);
        unsafe void VertexP2uiv(int type, uint* value);
        void VertexP2uiv(int type, uint[] value);
        void VertexP3ui(int type, uint value);
        unsafe void VertexP3uiv(int type, uint* value);
        void VertexP3uiv(int type, uint[] value);
        void VertexP4ui(int type, uint value);
        unsafe void VertexP4uiv(int type, uint* value);
        void VertexP4uiv(int type, uint[] value);
        void Viewport(int x, int y, int width, int height);
        void WaitSync(IntPtr sync, uint flags, ulong timeout);
    }
}