namespace Proof.OpenGL
{
    public unsafe class OpenGLApi : IOpenGLApi
    {
        public int GetError() => GL.GetError();
        public uint GetSamplerParameterIui(uint sampler, int paramName) => GL.GetSamplerParameterIui(sampler, paramName);
        public uint[] GetSamplerParameterIuiv(uint sampler, int paramName, int count) => GL.GetSamplerParameterIuiv(sampler, paramName, count);
        public void ActiveTexture(int texture) => GL.glActiveTexture(texture);
        public void AttachShader(uint program, uint shader) => GL.glAttachShader(program, shader);
        public void BeginConditionalRender(uint id, int mode) => GL.glBeginConditionalRender(id, mode);
        public void BeginQuery(int target, uint id) => GL.glBeginQuery(target, id);
        public void BeginTransformFeedback(int primitiveMode) => GL.glBeginTransformFeedback(primitiveMode);
        public void BindAttribLocation(uint program, uint index, string name) => GL.glBindAttribLocation(program, index, name);
        public void BindBuffer(int target, uint buffer) => GL.glBindBuffer(target, buffer);
        public void BindBufferBase(int target, uint index, uint buffer) => GL.glBindBufferBase(target, index, buffer);
        public void BindBufferRange(int target, uint index, uint buffer, int offset, int size) => GL.glBindBufferRange(target, index, buffer, offset, size);
        public void BindBufferRange(int target, uint index, uint buffer, long offset, long size) => GL.glBindBufferRange(target, index, buffer, offset, size);
        public void BindFragDataLocation(uint program, uint color, string name) => GL.glBindFragDataLocation(program, color, name);
        public void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name) => GL.glBindFragDataLocationIndexed(program, colorNumber, index, name);
        public void BindFramebuffer(int target, uint framebuffer) => GL.glBindFramebuffer(target, framebuffer);
        public void BindFramebuffer(uint framebuffer) => GL.glBindFramebuffer(framebuffer);
        public void BindRenderbuffer(uint renderbuffer) => GL.glBindRenderbuffer(renderbuffer);
        public void BindSampler(uint unit, uint sampler) => GL.glBindSampler(unit, sampler);
        public void BindTexture(int target, uint texture) => GL.glBindTexture(target, texture);
        public void BindVertexArray(uint array) => GL.glBindVertexArray(array);
        public void BlendColor(float red, float green, float blue, float alpha) => GL.glBlendColor(red, green, blue, alpha);
        public void BlendEquation(int mode) => GL.glBlendEquation(mode);
        public void BlendEquationSeparate(int modeRGB, int modeAlpha) => GL.glBlendEquationSeparate(modeRGB, modeAlpha);
        public void BlendFunc(int srcFactor, int dstFactor) => GL.glBlendFunc(srcFactor, dstFactor);
        public void BlendFuncSeparate(int sFactorRgb, int dFactorRgb, int sFactorAlpha, int dFactorAlpha) => GL.glBlendFuncSeparate(sFactorRgb, dFactorRgb, sFactorAlpha, dFactorAlpha);
        public void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, int filter) => GL.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public void BufferData(int target, int size, IntPtr data, int usage) => GL.glBufferData(target, size, data, usage);
        public void BufferData(int target, int size, void* data, int usage) => GL.glBufferData(target, size, data, usage);
        public void BufferSubData(int target, int offset, int size, IntPtr data) => GL.glBufferSubData(target, offset, size, data);
        public void BufferSubData(int target, long offset, long size, IntPtr data) => GL.glBufferSubData(target, offset, size, data);
        public void BufferSubData(int target, int offset, int size, void* data) => GL.glBufferSubData(target, offset, size, data);
        public void BufferSubData(int target, long offset, long size, void* data) => GL.glBufferSubData(target, offset, size, data);
        public int CheckFramebufferStatus(int target) => GL.glCheckFramebufferStatus(target);
        public void ClampColor(bool clamp) => GL.glClampColor(clamp);
        public void Clear(uint mask) => GL.glClear(mask);
        public void ClearBufferfi(int buffer, int drawbuffer, float depth, int stencil) => GL.glClearBufferfi(buffer, drawbuffer, depth, stencil);
        public void ClearBufferfv(int buffer, int drawbuffer, float[] value) => GL.glClearBufferfv(buffer, drawbuffer, value);
        public void ClearBufferfv(int buffer, int drawbuffer, float* value) => GL.glClearBufferfv(buffer, drawbuffer, value);
        public void ClearBufferiv(int buffer, int drawbuffer, int[] value) => GL.glClearBufferiv(buffer, drawbuffer, value);
        public void ClearBufferiv(int buffer, int drawbuffer, int* value) => GL.glClearBufferiv(buffer, drawbuffer, value);
        public void ClearBufferuiv(int buffer, int drawbuffer, uint[] value) => GL.glClearBufferuiv(buffer, drawbuffer, value);
        public void ClearBufferuiv(int buffer, int drawbuffer, uint* value) => GL.glClearBufferuiv(buffer, drawbuffer, value);
        public void ClearColor(float red, float green, float blue, float alpha) => GL.glClearColor(red, green, blue, alpha);
        public void ClearDepth(double depth) => GL.glClearDepth(depth);
        public void ClearStencil(int index) => GL.glClearStencil(index);
        public int ClientWaitSync(IntPtr sync, uint flags, ulong timeout) => GL.glClientWaitSync(sync, flags, timeout);
        public void ColorMask(bool red, bool green, bool blue, bool alpha) => GL.glColorMask(red, green, blue, alpha);
        public void ColorMaski(uint index, bool red, bool green, bool blue, bool alpha) => GL.glColorMaski(index, red, green, blue, alpha);
        public void ColorP3ui(int type, uint color) => GL.glColorP3ui(type, color);
        public void ColorP3uiv(int type, uint* color) => GL.glColorP3uiv(type, color);
        public void ColorP3uiv(int type, uint[] color) => GL.glColorP3uiv(type, color);
        public void ColorP4ui(int type, uint color) => GL.glColorP4ui(type, color);
        public void ColorP4uiv(int type, uint* color) => GL.glColorP4uiv(type, color);
        public void ColorP4uiv(int type, uint[] color) => GL.glColorP4uiv(type, color);
        public void CompileShader(uint shader) => GL.glCompileShader(shader);
        public void CompressedTexImage1D(int target, int level, int internalFormat, int width, int border, int imageSize, IntPtr data) => GL.glCompressedTexImage1D(target, level, internalFormat, width, border, imageSize, data);
        public void CompressedTexImage1D(int target, int level, int internalFormat, int width, int border, int imageSize, void* data) => GL.glCompressedTexImage1D(target, level, internalFormat, width, border, imageSize, data);
        public void CompressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, IntPtr data) => GL.glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data);
        public void CompressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, void* data) => GL.glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data);
        public void CompressedTexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int imageSize, IntPtr data) => GL.glCompressedTexImage3D(target, level, internalFormat, width, height, depth, border, imageSize, data);
        public void CompressedTexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int imageSize, void* data) => GL.glCompressedTexImage3D(target, level, internalFormat, width, height, depth, border, imageSize, data);
        public void CompressedTexSubImage1D(int target, int level, int xOffset, int width, int format, int imageSize, IntPtr data) => GL.glCompressedTexSubImage1D(target, level, xOffset, width, format, imageSize, data);
        public void CompressedTexSubImage1D(int target, int level, int xOffset, int width, int format, int imageSize, void* data) => GL.glCompressedTexSubImage1D(target, level, xOffset, width, format, imageSize, data);
        public void CompressedTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int imageSize, IntPtr data) => GL.glCompressedTexSubImage2D(target, level, xOffset, yOffset, width, height, format, imageSize, data);
        public void CompressedTexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int imageSize, void* data) => GL.glCompressedTexSubImage2D(target, level, xOffset, yOffset, width, height, format, imageSize, data);
        public void CompressedTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int imageSize, IntPtr data) => GL.glCompressedTexSubImage3D(target, level, xOffset, yOffset, zOffset, width, height, depth, format, imageSize, data);
        public void CompressedTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int imageSize, void* data) => GL.glCompressedTexSubImage3D(target, level, xOffset, yOffset, zOffset, width, height, depth, format, imageSize, data);
        public void CopyBufferSubData(int readTarget, int writeTarget, int readOffset, int writeOffset, int size) => GL.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        public void CopyBufferSubData(int readTarget, int writeTarget, long readOffset, long writeOffset, long size) => GL.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        public void CopyTexImage1D(int target, int level, int internalFormat, int x, int y, int width, int border) => GL.glCopyTexImage1D(target, level, internalFormat, x, y, width, border);
        public void CopyTexImage2D(int target, int level, int internalFormat, int x, int y, int width, int height, int border) => GL.glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border);
        public void CopyTexSubImage1D(int target, int level, int xOffset, int x, int y, int width) => GL.glCopyTexSubImage1D(target, level, xOffset, x, y, width);
        public void CopyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) => GL.glCopyTexSubImage2D(target, level, xOffset, yOffset, x, y, width, height);
        public void CopyTexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int x, int y, int width, int height) => GL.glCopyTexSubImage3D(target, level, xOffset, yOffset, zOffset, x, y, width, height);
        public uint CreateProgram() => GL.glCreateProgram();
        public uint CreateShader(int type) => GL.glCreateShader(type);
        public void CullFace(int mode) => GL.glCullFace(mode);
        public void DeleteBuffer(uint buffer) => GL.glDeleteBuffer(buffer);
        public void DeleteBuffers(int n, uint* buffers) => GL.glDeleteBuffers(n, buffers);
        public void DeleteBuffers(uint[] buffers) => GL.glDeleteBuffers(buffers);
        public void DeleteFramebuffer(uint buffer) => GL.glDeleteFramebuffer(buffer);
        public void DeleteFramebuffers(int n, uint* buffers) => GL.glDeleteFramebuffers(n, buffers);
        public void DeleteFramebuffers(uint[] buffers) => GL.glDeleteFramebuffers(buffers);
        public void DeleteProgram(uint program) => GL.glDeleteProgram(program);
        public void DeleteQueries(int n, uint* ids) => GL.glDeleteQueries(n, ids);
        public void DeleteQueries(uint[] ids) => GL.glDeleteQueries(ids);
        public void DeleteQuery(uint id) => GL.glDeleteQuery(id);
        public void DeleteRenderbuffer(uint renderbuffer) => GL.glDeleteRenderbuffer(renderbuffer);
        public void DeleteRenderbuffers(int n, uint* buffers) => GL.glDeleteRenderbuffers(n, buffers);
        public void DeleteRenderbuffers(uint[] buffers) => GL.glDeleteRenderbuffers(buffers);
        public void DeleteSampler(uint sampler) => GL.glDeleteSampler(sampler);
        public void DeleteSamplers(uint[] samplers) => GL.glDeleteSamplers(samplers);
        public void DeleteSamplers(int count, uint* samplers) => GL.glDeleteSamplers(count, samplers);
        public void DeleteShader(uint shader) => GL.glDeleteShader(shader);
        public void DeleteSync(IntPtr sync) => GL.glDeleteSync(sync);
        public void DeleteTexture(uint texture) => GL.glDeleteTexture(texture);
        public void DeleteTextures(int n, uint* textures) => GL.glDeleteTextures(n, textures);
        public void DeleteTextures(uint[] textures) => GL.glDeleteTextures(textures);
        public void DeleteVertexArray(uint array) => GL.glDeleteVertexArray(array);
        public void DeleteVertexArrays(int n, uint* arrays) => GL.glDeleteVertexArrays(n, arrays);
        public void DeleteVertexArrays(uint[] arrays) => GL.glDeleteVertexArrays(arrays);
        public void DepthFunc(int func) => GL.glDepthFunc(func);
        public void DepthMask(bool enabled) => GL.glDepthMask(enabled);
        public void DepthRange(double near, double far) => GL.glDepthRange(near, far);
        public void DetachShader(uint program, uint shader) => GL.glDetachShader(program, shader);
        public void Disable(int cap) => GL.glDisable(cap);
        public void Disablei(int target, uint index) => GL.glDisablei(target, index);
        public void DisableVertexAttribArray(uint index) => GL.glDisableVertexAttribArray(index);
        public void DrawArrays(int mode, int first, int count) => GL.glDrawArrays(mode, first, count);
        public void DrawArraysInstanced(int mode, int first, int count, int instanceCount) => GL.glDrawArraysInstanced(mode, first, count, instanceCount);
        public void DrawBuffer(int buffer) => GL.glDrawBuffer(buffer);
        public void DrawBuffers(int n, int* buffers) => GL.glDrawBuffers(n, buffers);
        public void DrawBuffers(int[] buffers) => GL.glDrawBuffers(buffers);
        public void DrawElements(int mode, int count, int type, void* indices) => GL.glDrawElements(mode, count, type, indices);
        public void DrawElements(int mode, byte[] indices) => GL.glDrawElements(mode, indices);
        public void DrawElements(int mode, ushort[] indices) => GL.glDrawElements(mode, indices);
        public void DrawElements(int mode, uint[] indices) => GL.glDrawElements(mode, indices);
        public void DrawElementsBaseVertex(int mode, int count, int type, void* indices, int baseVertex) => GL.glDrawElementsBaseVertex(mode, count, type, indices, baseVertex);
        public void DrawElementsBaseVertex(int mode, int count, byte[] indices, int baseVertex) => GL.glDrawElementsBaseVertex(mode, count, indices, baseVertex);
        public void DrawElementsBaseVertex(int mode, int count, ushort[] indices, int baseVertex) => GL.glDrawElementsBaseVertex(mode, count, indices, baseVertex);
        public void DrawElementsBaseVertex(int mode, int count, uint[] indices, int baseVertex) => GL.glDrawElementsBaseVertex(mode, count, indices, baseVertex);
        public void DrawElementsInstanced(int mode, int count, int type, void* indices, int instanceCount) => GL.glDrawElementsInstanced(mode, count, type, indices, instanceCount);
        public void DrawElementsInstanced(int mode, int count, byte[] indices, int instanceCount) => GL.glDrawElementsInstanced(mode, count, indices, instanceCount);
        public void DrawElementsInstanced(int mode, int count, ushort[] indices, int instanceCount) => GL.glDrawElementsInstanced(mode, count, indices, instanceCount);
        public void DrawElementsInstanced(int mode, int count, uint[] indices, int instanceCount) => GL.glDrawElementsInstanced(mode, count, indices, instanceCount);
        public void DrawElementsInstancedBaseVertex(int mode, int count, ushort[] indices, int instanceCount, int baseVertex) => GL.glDrawElementsInstancedBaseVertex(mode, count, indices, instanceCount, baseVertex);
        public void DrawElementsInstancedBaseVertex(int mode, int count, uint[] indices, int instanceCount, int baseVertex) => GL.glDrawElementsInstancedBaseVertex(mode, count, indices, instanceCount, baseVertex);
        public void DrawElementsInstancedBaseVertex(int mode, int count, int type, void* indices, int instanceCount, int baseVertex) => GL.glDrawElementsInstancedBaseVertex(mode, count, type, indices, instanceCount, baseVertex);
        public void DrawElementsInstancedBaseVertex(int mode, int count, byte[] indices, int instanceCount, int baseVertex) => GL.glDrawElementsInstancedBaseVertex(mode, count, indices, instanceCount, baseVertex);
        public void DrawRangeElements(int mode, uint start, uint end, int count, byte[] indices) => GL.glDrawRangeElements(mode, start, end, count, indices);
        public void DrawRangeElements(int mode, uint start, uint end, int count, ushort[] indices) => GL.glDrawRangeElements(mode, start, end, count, indices);
        public void DrawRangeElements(int mode, uint start, uint end, int count, uint[] indices) => GL.glDrawRangeElements(mode, start, end, count, indices);
        public void DrawRangeElements(int mode, uint start, uint end, int count, int type, void* indices) => GL.glDrawRangeElements(mode, start, end, count, type, indices);
        public void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, int type, void* indices, int baseVertex) => GL.glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, baseVertex);
        public void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, byte[] indices, int baseVertex) => GL.glDrawRangeElementsBaseVertex(mode, start, end, count, indices, baseVertex);
        public void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, ushort[] indices, int baseVertex) => GL.glDrawRangeElementsBaseVertex(mode, start, end, count, indices, baseVertex);
        public void DrawRangeElementsBaseVertex(int mode, uint start, uint end, int count, uint[] indices, int baseVertex) => GL.glDrawRangeElementsBaseVertex(mode, start, end, count, indices, baseVertex);
        public void Enable(int cap) => GL.glEnable(cap);
        public void Enablei(int target, uint index) => GL.glEnablei(target, index);
        public void EnableVertexAttribArray(uint index) => GL.glEnableVertexAttribArray(index);
        public void EndConditionalRender() => GL.glEndConditionalRender();
        public void EndQuery(int target) => GL.glEndQuery(target);
        public void EndTransformFeedback() => GL.glEndTransformFeedback();
        public IntPtr FenceSync(int condition, uint flags = 0) => GL.glFenceSync(condition, flags);
        public void Finish() => GL.glFinish();
        public void Flush() => GL.glFlush();
        public void FlushMappedBufferRange(int target, int offset, int length) => GL.glFlushMappedBufferRange(target, offset, length);
        public void FlushMappedBufferRange(int target, long offset, long length) => GL.glFlushMappedBufferRange(target, offset, length);
        public void FramebufferRenderbuffer(int target, int attachment, int renderbufferTarget, uint renderbuffer) => GL.glFramebufferRenderbuffer(target, attachment, renderbufferTarget, renderbuffer);
        public void FramebufferRenderbuffer(int attachment, uint renderbuffer) => GL.glFramebufferRenderbuffer(attachment, renderbuffer);
        public void FramebufferTexture(int target, int attachment, uint texture, int level) => GL.glFramebufferTexture(target, attachment, texture, level);
        public void FramebufferTexture1D(int target, int attachment, int texTarget, uint texture, int level) => GL.glFramebufferTexture1D(target, attachment, texTarget, texture, level);
        public void FramebufferTexture2D(int target, int attachment, int texTarget, uint texture, int level) => GL.glFramebufferTexture2D(target, attachment, texTarget, texture, level);
        public void FramebufferTexture3D(int target, int attachment, int texTarget, uint texture, int level, int zOffset) => GL.glFramebufferTexture3D(target, attachment, texTarget, texture, level, zOffset);
        public void FramebufferTextureLayer(int target, int attachment, uint texture, int level, int layer) => GL.glFramebufferTextureLayer(target, attachment, texture, level, layer);
        public void FrontFace(int mode) => GL.glFrontFace(mode);
        public uint GenBuffer() => GL.glGenBuffer();
        public void GenBuffers(int n, uint* buffers) => GL.glGenBuffers(n, buffers);
        public uint[] GenBuffers(int n) => GL.glGenBuffers(n);
        public void GenerateMipmap(int target) => GL.glGenerateMipmap(target);
        public uint GenFramebuffer() => GL.glGenFramebuffer();
        public uint[] GenFramebuffers(int n) => GL.glGenFramebuffers(n);
        public void GenFramebuffers(int n, uint* buffers) => GL.glGenFramebuffers(n, buffers);
        public void GenQueries(int n, uint* ids) => GL.glGenQueries(n, ids);
        public uint[] GenQueries(int n) => GL.glGenQueries(n);
        public uint GenQuery() => GL.glGenQuery();
        public uint GenRenderbuffer() => GL.glGenRenderbuffer();
        public void GenRenderbuffers(int n, uint* buffers) => GL.glGenRenderbuffers(n, buffers);
        public uint[] GenRenderbuffers(int n) => GL.glGenRenderbuffers(n);
        public uint GenSampler() => GL.glGenSampler();
        public void GenSamplers(int count, uint* samplers) => GL.glGenSamplers(count, samplers);
        public uint[] GenSamplers(int count) => GL.glGenSamplers(count);
        public uint GenTexture() => GL.glGenTexture();
        public void GenTextures(int n, uint* textures) => GL.glGenTextures(n, textures);
        public uint[] GenTextures(int n) => GL.glGenTextures(n);
        public uint GenVertexArray() => GL.glGenVertexArray();
        public void GenVertexArrays(int n, uint* arrays) => GL.glGenVertexArrays(n, arrays);
        public uint[] GenVertexArrays(int n) => GL.glGenVertexArrays(n);
        public void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name) => GL.glGetActiveAttrib(program, index, bufSize, out length, out size, out type, out name);
        public void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out int type, out string name) => GL.glGetActiveUniform(program, index, bufSize, out length, out size, out type, out name);
        public void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int* args) => GL.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, args);
        public int[] GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, int pname, int count) => GL.glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, count);
        public string GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize = 512) => GL.glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize);
        public string GetActiveUniformName(uint program, uint uniformIndex, int bufSize = 512) => GL.glGetActiveUniformName(program, uniformIndex, bufSize);
        public void GetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, int pname, int* args) => GL.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, args);
        public void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, int pname, int[] args) => GL.glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, args);
        public void GetAttachedShaders(uint program, int maxCount, int* count, uint* shaders) => GL.glGetAttachedShaders(program, maxCount, count, shaders);
        public uint[] GetAttachedShaders(uint program, int maxCount) => GL.glGetAttachedShaders(program, maxCount);
        public int GetAttribLocation(uint program, string name) => GL.glGetAttribLocation(program, name);
        public bool GetBoolean(int paramName) => GL.glGetBoolean(paramName);
        public bool GetBooleani(int target, uint index) => GL.glGetBooleani(target, index);
        public void GetBooleani_v(int target, uint index, bool* data) => GL.glGetBooleani_v(target, index, data);
        public bool[] GetBooleani_v(int target, uint index, int count) => GL.glGetBooleani_v(target, index, count);
        public void GetBooleanv(int paramName, bool* data) => GL.glGetBooleanv(paramName, data);
        public bool[] GetBooleanv(int paramName, int count) => GL.glGetBooleanv(paramName, count);
        public void GetBufferParameteri64v(int target, int pname, long* args) => GL.glGetBufferParameteri64v(target, pname, args);
        public long[] GetBufferParameteri64v(int target, int pname, int count) => GL.glGetBufferParameteri64v(target, pname, count);
        public void GetBufferParameteriv(int target, int pname, int* args) => GL.glGetBufferParameteriv(target, pname, args);
        public int[] GetBufferParameteriv(int target, int pname, int count) => GL.glGetBufferParameteriv(target, pname, count);
        public IntPtr GetBufferPointerv(int target, int pname) => GL.glGetBufferPointerv(target, pname);
        public void GetBufferSubData(int target, int offset, int size, IntPtr data) => GL.glGetBufferSubData(target, offset, size, data);
        public void GetBufferSubData(int target, long offset, long size, IntPtr data) => GL.glGetBufferSubData(target, offset, size, data);
        public void GetBufferSubData(int target, int offset, int size, void* data) => GL.glGetBufferSubData(target, offset, size, data);
        public void GetBufferSubData(int target, long offset, long size, void* data) => GL.glGetBufferSubData(target, offset, size, data);
        public void GetCompressedTexImage(int target, int level, IntPtr pixels) => GL.glGetCompressedTexImage(target, level, pixels);
        public void GetCompressedTexImage(int target, int level, void* pixels) => GL.glGetCompressedTexImage(target, level, pixels);
        public double GetDouble(int paramName) => GL.glGetDouble(paramName);
        public void GetDoublev(int paramName, double* data) => GL.glGetDoublev(paramName, data);
        public double[] GetDoublev(int paramName, int count) => GL.glGetDoublev(paramName, count);
        public float GetFloat(int paramName) => GL.glGetFloat(paramName);
        public void GetFloatv(int paramName, float* data) => GL.glGetFloatv(paramName, data);
        public float[] GetFloatv(int paramName, int count) => GL.glGetFloatv(paramName, count);
        public int GetFragDataIndex(uint program, string name) => GL.glGetFragDataIndex(program, name);
        public int GetFragDataLocation(uint program, string name) => GL.glGetFragDataLocation(program, name);
        public void GetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int* args) => GL.glGetFramebufferAttachmentParameteriv(target, attachment, pname, args);
        public int[] GetFramebufferAttachmentParameteriv(int target, int attachment, int pname, int count) => GL.glGetFramebufferAttachmentParameteriv(target, attachment, pname, count);
        public int GetInteger(int paramName) => GL.glGetInteger(paramName);
        public long GetInteger64(int paramName) => GL.glGetInteger64(paramName);
        public long GetInteger64i(int target, uint index) => GL.glGetInteger64i(target, index);
        public void GetInteger64i_v(int target, uint index, long* data) => GL.glGetInteger64i_v(target, index, data);
        public long[] GetInteger64i_v(int target, uint index, int count) => GL.glGetInteger64i_v(target, index, count);
        public void GetInteger64v(int paramName, long* data) => GL.glGetInteger64v(paramName, data);
        public long[] GetInteger64v(int paramName, int count) => GL.glGetInteger64v(paramName, count);
        public int GetIntegeri(int target, uint index) => GL.glGetIntegeri(target, index);
        public void GetIntegeri_v(int target, uint index, int* data) => GL.glGetIntegeri_v(target, index, data);
        public int[] GetIntegeri_v(int target, uint index, int count) => GL.glGetIntegeri_v(target, index, count);
        public void GetIntegerv(int paramName, int* data) => GL.glGetIntegerv(paramName, data);
        public int[] GetIntegerv(int paramName, int count) => GL.glGetIntegerv(paramName, count);
        public void GetMultisamplefv(int pname, uint index, float* val) => GL.glGetMultisamplefv(pname, index, val);
        public float[] GetMultisamplefv(int pname, uint index, int count) => GL.glGetMultisamplefv(pname, index, count);
        public string GetProgramInfoLog(uint program, int bufSize = 1024) => GL.glGetProgramInfoLog(program, bufSize);
        public void GetProgramiv(uint program, int pname, int* args) => GL.glGetProgramiv(program, pname, args);
        public int[] GetProgramiv(uint program, int pname, int count) => GL.glGetProgramiv(program, pname, count);
        public void GetQueryiv(int target, int pname, int* args) => GL.glGetQueryiv(target, pname, args);
        public int[] GetQueryiv(int target, int pname, int count) => GL.glGetQueryiv(target, pname, count);
        public void GetQueryObjecti64v(uint id, int pname, long* args) => GL.glGetQueryObjecti64v(id, pname, args);
        public long[] GetQueryObjecti64v(uint id, int pname, int count) => GL.glGetQueryObjecti64v(id, pname, count);
        public void GetQueryObjectiv(uint id, int pname, int* args) => GL.glGetQueryObjectiv(id, pname, args);
        public int[] GetQueryObjectiv(uint id, int pname, int count) => GL.glGetQueryObjectiv(id, pname, count);
        public void GetQueryObjectui64v(uint id, int pname, ulong* args) => GL.glGetQueryObjectui64v(id, pname, args);
        public ulong[] GetQueryObjectui64v(uint id, int pname, int count) => GL.glGetQueryObjectui64v(id, pname, count);
        public void GetQueryObjectuiv(uint id, int pname, uint* args) => GL.glGetQueryObjectuiv(id, pname, args);
        public uint[] GetQueryObjectuiv(uint id, int pname, int count) => GL.glGetQueryObjectuiv(id, pname, count);
        public void GetRenderbufferParameteriv(int target, int pname, int* args) => GL.glGetRenderbufferParameteriv(target, pname, args);
        public void GetRenderbufferParameteriv(int target, int pname, int[] args) => GL.glGetRenderbufferParameteriv(target, pname, args);
        public float[] GetSamplerParameterfv(uint sampler, int paramName, int count) => GL.glGetSamplerParameterfv(sampler, paramName, count);
        public float GetSamplerParameterfv(uint sampler, int paramName) => GL.glGetSamplerParameterfv(sampler, paramName);
        public void GetSamplerParameterfv(uint sampler, int paramName, float* args) => GL.glGetSamplerParameterfv(sampler, paramName, args);
        public int[] GetSamplerParameterIiv(uint sampler, int paramName, int count) => GL.glGetSamplerParameterIiv(sampler, paramName, count);
        public int GetSamplerParameterIiv(uint sampler, int paramName) => GL.glGetSamplerParameterIiv(sampler, paramName);
        public void GetSamplerParameterIiv(uint sampler, int paramName, int* args) => GL.glGetSamplerParameterIiv(sampler, paramName, args);
        public void GetSamplerParameterIuiv(uint sampler, int paramName, uint* args) => GL.glGetSamplerParameterIuiv(sampler, paramName, args);
        public int[] GetSamplerParameteriv(uint sampler, int paramName, int count) => GL.glGetSamplerParameteriv(sampler, paramName, count);
        public int GetSamplerParameteriv(uint sampler, int paramName) => GL.glGetSamplerParameteriv(sampler, paramName);
        public void GetSamplerParameteriv(uint sampler, int paramName, int* args) => GL.glGetSamplerParameteriv(sampler, paramName, args);
        public string GetShaderInfoLog(uint shader, int bufSize = 1024) => GL.glGetShaderInfoLog(shader, bufSize);
        public void GetShaderiv(uint shader, int pname, int* args) => GL.glGetShaderiv(shader, pname, args);
        public int[] GetShaderiv(uint shader, int pname, int count) => GL.glGetShaderiv(shader, pname, count);
        public string GetShaderSource(uint shader, int bufSize = 4096) => GL.glGetShaderSource(shader, bufSize);
        public string GetString(int name) => GL.glGetString(name);
        public string GetStringi(int name, uint index) => GL.glGetStringi(name, index);
        public void GetSynciv(IntPtr sync, int pname, int bufSize, int* length, int* values) => GL.glGetSynciv(sync, pname, bufSize, length, values);
        public int[] GetSynciv(IntPtr sync, int pname, int count, out int length) => GL.glGetSynciv(sync, pname, count, out length);
        public void GetTexImage(int target, int level, int format, int type, void* pixels) => GL.glGetTexImage(target, level, format, type, pixels);
        public void GetTexImage(int target, int level, int format, int type, IntPtr pixels) => GL.glGetTexImage(target, level, format, type, pixels);
        public float GetTexLevelParameterf(int target, int level, int paramName) => GL.glGetTexLevelParameterf(target, level, paramName);
        public float[] GetTexLevelParameterfv(int target, int level, int paramName, int count) => GL.glGetTexLevelParameterfv(target, level, paramName, count);
        public void GetTexLevelParameterfv(int target, int level, int paramName, float* args) => GL.glGetTexLevelParameterfv(target, level, paramName, args);
        public int GetTexLevelParameteri(int target, int level, int paramName) => GL.glGetTexLevelParameteri(target, level, paramName);
        public int[] GetTexLevelParameteriv(int target, int level, int paramName, int count) => GL.glGetTexLevelParameteriv(target, level, paramName, count);
        public void GetTexLevelParameteriv(int target, int level, int paramName, int* args) => GL.glGetTexLevelParameteriv(target, level, paramName, args);
        public float GetTexParameterf(int target, int paramName) => GL.glGetTexParameterf(target, paramName);
        public float[] GetTexParameterfv(int target, int paramName, int count) => GL.glGetTexParameterfv(target, paramName, count);
        public void GetTexParameterfv(int target, int paramName, float* args) => GL.glGetTexParameterfv(target, paramName, args);
        public int GetTexParameteri(int target, int paramName) => GL.glGetTexParameteri(target, paramName);
        public void GetTexParameterIiv(int target, int pname, int* args) => GL.glGetTexParameterIiv(target, pname, args);
        public int[] GetTexParameterIiv(int target, int pname, int count) => GL.glGetTexParameterIiv(target, pname, count);
        public void GetTexParameterIuiv(int target, int pname, uint* args) => GL.glGetTexParameterIuiv(target, pname, args);
        public uint[] GetTexParameterIuiv(int target, int pname, int count) => GL.glGetTexParameterIuiv(target, pname, count);
        public int[] GetTexParameteriv(int target, int paramName, int count) => GL.glGetTexParameteriv(target, paramName, count);
        public void GetTexParameteriv(int target, int paramName, int* args) => GL.glGetTexParameteriv(target, paramName, args);
        public void GetTransformFeedbackVarying(uint program, uint index, out int size, out int type, out string name, int bufSize = 512) => GL.glGetTransformFeedbackVarying(program, index, out size, out type, out name, bufSize);
        public uint GetUniformBlockIndex(uint program, string uniformBlockName) => GL.glGetUniformBlockIndex(program, uniformBlockName);
        public void GetUniformfv(uint program, int location, float* args) => GL.glGetUniformfv(program, location, args);
        public float[] GetUniformfv(uint program, int location, int count) => GL.glGetUniformfv(program, location, count);
        public uint GetUniformIndex(uint program, string uniformName) => GL.glGetUniformIndex(program, uniformName);
        public void GetUniformiv(uint program, int location, int* args) => GL.glGetUniformiv(program, location, args);
        public int[] GetUniformiv(uint program, int location, int count) => GL.glGetUniformiv(program, location, count);
        public int GetUniformLocation(uint program, byte* name) => GL.glGetUniformLocation(program, name);
        public int GetUniformLocation(uint program, byte[] name) => GL.glGetUniformLocation(program, name);
        public int GetUniformLocation(uint program, string name) => GL.glGetUniformLocation(program, name);
        public void GetUniformuiv(uint program, int location, uint* args) => GL.glGetUniformuiv(program, location, args);
        public uint[] GetUniformuiv(uint program, int location, int count) => GL.glGetUniformuiv(program, location, count);
        public void GetVertexAttribdv(uint index, int pname, double* args) => GL.glGetVertexAttribdv(index, pname, args);
        public double[] GetVertexAttribdv(uint index, int pname, int count) => GL.glGetVertexAttribdv(index, pname, count);
        public void GetVertexAttribfv(uint index, int pname, float* args) => GL.glGetVertexAttribfv(index, pname, args);
        public float[] GetVertexAttribfv(uint index, int pname, int count) => GL.glGetVertexAttribfv(index, pname, count);
        public void GetVertexAttribIiv(uint index, int pname, int* args) => GL.glGetVertexAttribIiv(index, pname, args);
        public int[] GetVertexAttribIiv(uint index, int pname, int count) => GL.glGetVertexAttribIiv(index, pname, count);
        public void GetVertexAttribIuiv(uint index, int pname, uint* args) => GL.glGetVertexAttribIuiv(index, pname, args);
        public uint[] GetVertexAttribIuiv(uint index, int pname, int count) => GL.glGetVertexAttribIuiv(index, pname, count);
        public void GetVertexAttribiv(uint index, int pname, int* args) => GL.glGetVertexAttribiv(index, pname, args);
        public int[] GetVertexAttribiv(uint index, int pname, int count) => GL.glGetVertexAttribiv(index, pname, count);
        public IntPtr GetVertexAttribPointerv(uint index, int pname) => GL.glGetVertexAttribPointerv(index, pname);
        public void Hint(int target, int mode) => GL.glHint(target, mode);
        public bool IsBuffer(uint buffer) => GL.glIsBuffer(buffer);
        public bool IsEnabled(int cap) => GL.glIsEnabled(cap);
        public bool IsEnabledi(int target, uint index) => GL.glIsEnabledi(target, index);
        public bool IsFramebuffer(uint framebuffer) => GL.glIsFramebuffer(framebuffer);
        public bool IsProgram(uint program) => GL.glIsProgram(program);
        public bool IsQuery(uint id) => GL.glIsQuery(id);
        public bool IsRenderbuffer(uint renderbuffer) => GL.glIsRenderbuffer(renderbuffer);
        public bool IsSampler(uint sampler) => GL.glIsSampler(sampler);
        public bool IsShader(uint shader) => GL.glIsShader(shader);
        public bool IsSync(IntPtr sync) => GL.glIsSync(sync);
        public bool IsTexture(uint texture) => GL.glIsTexture(texture);
        public bool IsVertexArray(uint array) => GL.glIsVertexArray(array);
        public void LineWidth(float width) => GL.glLineWidth(width);
        public void LinkProgram(uint program) => GL.glLinkProgram(program);
        public void LogicOp(int opcode) => GL.glLogicOp(opcode);
        public IntPtr MapBuffer(int target, int access) => GL.glMapBuffer(target, access);
        public IntPtr MapBufferRange(int target, int offset, int length, uint access) => GL.glMapBufferRange(target, offset, length, access);
        public IntPtr MapBufferRange(int target, long offset, long length, uint access) => GL.glMapBufferRange(target, offset, length, access);
        public void MultiDrawArrays(int mode, int* first, int* count, int drawCount) => GL.glMultiDrawArrays(mode, first, count, drawCount);
        public void MultiDrawArrays(int mode, int[] first, int[] count, int drawCount) => GL.glMultiDrawArrays(mode, first, count, drawCount);
        public void MultiDrawElements(int mode, int* count, int type, void** indices, int drawCount) => GL.glMultiDrawElements(mode, count, type, indices, drawCount);
        public void MultiDrawElements(int mode, int[] count, int type, IntPtr indices, int drawCount) => GL.glMultiDrawElements(mode, count, type, indices, drawCount);
        public void MultiDrawElementsBaseVertex(int mode, int* count, int type, void** indices, int drawCount, int* baseVertex) => GL.glMultiDrawElementsBaseVertex(mode, count, type, indices, drawCount, baseVertex);
        public void MultiTexCoordP1ui(int texture, int type, uint coords) => GL.glMultiTexCoordP1ui(texture, type, coords);
        public void MultiTexCoordP1uiv(int texture, int type, uint* coords) => GL.glMultiTexCoordP1uiv(texture, type, coords);
        public void MultiTexCoordP1uiv(int texture, int type, uint[] coords) => GL.glMultiTexCoordP1uiv(texture, type, coords);
        public void MultiTexCoordP2ui(int texture, int type, uint coords) => GL.glMultiTexCoordP2ui(texture, type, coords);
        public void MultiTexCoordP2uiv(int texture, int type, uint* coords) => GL.glMultiTexCoordP2uiv(texture, type, coords);
        public void MultiTexCoordP2uiv(int texture, int type, uint[] coords) => GL.glMultiTexCoordP2uiv(texture, type, coords);
        public void MultiTexCoordP3ui(int texture, int type, uint coords) => GL.glMultiTexCoordP3ui(texture, type, coords);
        public void MultiTexCoordP3uiv(int texture, int type, uint* coords) => GL.glMultiTexCoordP3uiv(texture, type, coords);
        public void MultiTexCoordP3uiv(int texture, int type, uint[] coords) => GL.glMultiTexCoordP3uiv(texture, type, coords);
        public void MultiTexCoordP4ui(int texture, int type, uint coords) => GL.glMultiTexCoordP4ui(texture, type, coords);
        public void MultiTexCoordP4uiv(int texture, int type, uint* coords) => GL.glMultiTexCoordP4uiv(texture, type, coords);
        public void MultiTexCoordP4uiv(int texture, int type, uint[] coords) => GL.glMultiTexCoordP4uiv(texture, type, coords);
        public void NormalP3ui(int type, uint coords) => GL.glNormalP3ui(type, coords);
        public void NormalP3uiv(int type, uint* coords) => GL.glNormalP3uiv(type, coords);
        public void NormalP3uiv(int type, uint[] coords) => GL.glNormalP3uiv(type, coords);
        public void PixelStoref(int paramName, float param) => GL.glPixelStoref(paramName, param);
        public void PixelStorei(int paramName, int param) => GL.glPixelStorei(paramName, param);
        public void PointParameterf(int paramName, float param) => GL.glPointParameterf(paramName, param);
        public void PointParameterfv(int paramName, float* args) => GL.glPointParameterfv(paramName, args);
        public void PointParameterfv(int paramName, float[] args) => GL.glPointParameterfv(paramName, args);
        public void PointParameteri(int paramName, int param) => GL.glPointParameteri(paramName, param);
        public void PointParameteriv(int paramName, int* args) => GL.glPointParameteriv(paramName, args);
        public void PointParameteriv(int paramName, int[] args) => GL.glPointParameteriv(paramName, args);
        public void PointSize(float size) => GL.glPointSize(size);
        public void PolygonMode(int face, int mode) => GL.glPolygonMode(face, mode);
        public void PolygonOffset(float factor, float units) => GL.glPolygonOffset(factor, units);
        public void PrimitiveRestartIndex(uint index) => GL.glPrimitiveRestartIndex(index);
        public void ProvokingVertex(int mode) => GL.glProvokingVertex(mode);
        public void QueryCounter(uint id, int target) => GL.glQueryCounter(id, target);
        public void ReadBuffer(int buffer) => GL.glReadBuffer(buffer);
        public void ReadPixels(int x, int y, int width, int height, int format, int type, void* pixels) => GL.glReadPixels(x, y, width, height, format, type, pixels);
        public void ReadPixels(int x, int y, int width, int height, int format, int type, IntPtr pixels) => GL.glReadPixels(x, y, width, height, format, type, pixels);
        public void ReadPixels(int x, int y, int width, int height, int format, int type, byte[] pixels) => GL.glReadPixels(x, y, width, height, format, type, pixels);
        public void RenderbufferStorage(int target, int internalFormat, int width, int height) => GL.glRenderbufferStorage(target, internalFormat, width, height);
        public void RenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) => GL.glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
        public void SampleCoverage(float value, bool invert) => GL.glSampleCoverage(value, invert);
        public void SampleMaski(uint maskNumber, uint mask) => GL.glSampleMaski(maskNumber, mask);
        public void SamplerParameterf(uint sampler, int paramName, float param) => GL.glSamplerParameterf(sampler, paramName, param);
        public void SamplerParameterfv(uint sampler, int paramName, float[] param) => GL.glSamplerParameterfv(sampler, paramName, param);
        public void SamplerParameterfv(uint sampler, int paramName, float* param) => GL.glSamplerParameterfv(sampler, paramName, param);
        public void SamplerParameteri(uint sampler, int paramName, int param) => GL.glSamplerParameteri(sampler, paramName, param);
        public void SamplerParameterIiv(uint sampler, int paramName, int* param) => GL.glSamplerParameterIiv(sampler, paramName, param);
        public void SamplerParameterIiv(uint sampler, int paramName, int[] param) => GL.glSamplerParameterIiv(sampler, paramName, param);
        public void SamplerParameterIuiv(uint sampler, int paramName, uint* param) => GL.glSamplerParameterIuiv(sampler, paramName, param);
        public void SamplerParameterIuiv(uint sampler, int paramName, uint[] param) => GL.glSamplerParameterIuiv(sampler, paramName, param);
        public void SamplerParameteriv(uint sampler, int paramName, int[] param) => GL.glSamplerParameteriv(sampler, paramName, param);
        public void SamplerParameteriv(uint sampler, int paramName, int* param) => GL.glSamplerParameteriv(sampler, paramName, param);
        public void Scissor(int x, int y, int width, int height) => GL.glScissor(x, y, width, height);
        public void SecondaryColorP3ui(int type, uint color) => GL.glSecondaryColorP3ui(type, color);
        public void SecondaryColorP3uiv(int type, uint[] color) => GL.glSecondaryColorP3uiv(type, color);
        public void SecondaryColorP3uiv(int type, uint* color) => GL.glSecondaryColorP3uiv(type, color);
        public void ShaderSource(uint shader, int count, byte** str, int* length) => GL.glShaderSource(shader, count, str, length);
        public void ShaderSource(uint shader, string source) => GL.glShaderSource(shader, source);
        public void StencilFunc(int func, int reference, uint mask) => GL.glStencilFunc(func, reference, mask);
        public void StencilFuncSeparate(int face, int func, int reference, uint mask) => GL.glStencilFuncSeparate(face, func, reference, mask);
        public void StencilMask(uint mask) => GL.glStencilMask(mask);
        public void StencilMaskSeparate(int face, uint mask) => GL.glStencilMaskSeparate(face, mask);
        public void StencilOp(int fail, int zfail, int zpass) => GL.glStencilOp(fail, zfail, zpass);
        public void StencilOpSeparate(int face, int sfail, int dpfail, int dppass) => GL.glStencilOpSeparate(face, sfail, dpfail, dppass);
        public void TexBuffer(int target, int internalFormat, uint buffer) => GL.glTexBuffer(target, internalFormat, buffer);
        public void TexCoordP1ui(int type, uint coords) => GL.glTexCoordP1ui(type, coords);
        public void TexCoordP1uiv(int type, uint* coords) => GL.glTexCoordP1uiv(type, coords);
        public void TexCoordP1uiv(int type, uint[] coords) => GL.glTexCoordP1uiv(type, coords);
        public void TexCoordP2ui(int type, uint coords) => GL.glTexCoordP2ui(type, coords);
        public void TexCoordP2uiv(int type, uint* coords) => GL.glTexCoordP2uiv(type, coords);
        public void TexCoordP2uiv(int type, uint[] coords) => GL.glTexCoordP2uiv(type, coords);
        public void TexCoordP3ui(int type, uint coords) => GL.glTexCoordP3ui(type, coords);
        public void TexCoordP3uiv(int type, uint* coords) => GL.glTexCoordP3uiv(type, coords);
        public void TexCoordP3uiv(int type, uint[] coords) => GL.glTexCoordP3uiv(type, coords);
        public void TexCoordP4ui(int type, uint coords) => GL.glTexCoordP4ui(type, coords);
        public void TexCoordP4uiv(int type, uint* coords) => GL.glTexCoordP4uiv(type, coords);
        public void TexCoordP4uiv(int type, uint[] coords) => GL.glTexCoordP4uiv(type, coords);
        public void TexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, IntPtr pixels) => GL.glTexImage1D(target, level, internalFormat, width, border, format, type, pixels);
        public void TexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, void* pixels) => GL.glTexImage1D(target, level, internalFormat, width, border, format, type, pixels);
        public void TexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, IntPtr pixels) => GL.glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        public void TexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, void* pixels) => GL.glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
        public void TexImage2DMultisample(int target, int samples, int internalformat, int width, int height, bool fixedsamplelocations) => GL.glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        public void TexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, IntPtr pixels) => GL.glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
        public void TexImage3D(int target, int level, int internalFormat, int width, int height, int depth, int border, int format, int type, void* pixels) => GL.glTexImage3D(target, level, internalFormat, width, height, depth, border, format, type, pixels);
        public void TexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, bool fixedsamplelocations) => GL.glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public void TexParameterf(int target, int paramName, float param) => GL.glTexParameterf(target, paramName, param);
        public void TexParameterfv(int target, int paramName, float* param) => GL.glTexParameterfv(target, paramName, param);
        public void TexParameterfv(int target, int paramName, float[] param) => GL.glTexParameterfv(target, paramName, param);
        public void TexParameteri(int target, int paramName, int param) => GL.glTexParameteri(target, paramName, param);
        public void TexParameterIiv(int target, int pname, int* args) => GL.glTexParameterIiv(target, pname, args);
        public void TexParameterIiv(int target, int pname, int[] args) => GL.glTexParameterIiv(target, pname, args);
        public void TexParameterIuiv(int target, int pname, uint* args) => GL.glTexParameterIuiv(target, pname, args);
        public void TexParameterIuiv(int target, int pname, uint[] args) => GL.glTexParameterIuiv(target, pname, args);
        public void TexParameteriv(int target, int paramName, int* param) => GL.glTexParameteriv(target, paramName, param);
        public void TexParameteriv(int target, int paramName, int[] param) => GL.glTexParameteriv(target, paramName, param);
        public void TexSubImage1D(int target, int level, int xOffset, int width, int format, int type, IntPtr pixels) => GL.glTexSubImage1D(target, level, xOffset, width, format, type, pixels);
        public void TexSubImage1D(int target, int level, int xOffset, int width, int format, int type, void* pixels) => GL.glTexSubImage1D(target, level, xOffset, width, format, type, pixels);
        public void TexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, IntPtr pixels) => GL.glTexSubImage2D(target, level, xOffset, yOffset, width, height, format, type, pixels);
        public void TexSubImage2D(int target, int level, int xOffset, int yOffset, int width, int height, int format, int type, void* pixels) => GL.glTexSubImage2D(target, level, xOffset, yOffset, width, height, format, type, pixels);
        public void TexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int type, IntPtr pixels) => GL.glTexSubImage3D(target, level, xOffset, yOffset, zOffset, width, height, depth, format, type, pixels);
        public void TexSubImage3D(int target, int level, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int format, int type, void* pixels) => GL.glTexSubImage3D(target, level, xOffset, yOffset, zOffset, width, height, depth, format, type, pixels);
        public void TransformFeedbackVaryings(uint program, int count, byte** varyings, int bufferMode) => GL.glTransformFeedbackVaryings(program, count, varyings, bufferMode);
        public void Uniform1f(int location, float v0) => GL.glUniform1f(location, v0);
        public void Uniform1fv(int location, int count, float* value) => GL.glUniform1fv(location, count, value);
        public void Uniform1fv(int location, int count, float[] value) => GL.glUniform1fv(location, count, value);
        public void Uniform1i(int location, int v0) => GL.glUniform1i(location, v0);
        public void Uniform1iv(int location, int count, int* value) => GL.glUniform1iv(location, count, value);
        public void Uniform1iv(int location, int count, int[] value) => GL.glUniform1iv(location, count, value);
        public void Uniform1ui(int location, uint v0) => GL.glUniform1ui(location, v0);
        public void Uniform1uiv(int location, int count, uint* value) => GL.glUniform1uiv(location, count, value);
        public void Uniform1uiv(int location, int count, uint[] value) => GL.glUniform1uiv(location, count, value);
        public void Uniform2f(int location, float v0, float v1) => GL.glUniform2f(location, v0, v1);
        public void Uniform2fv(int location, int count, float* value) => GL.glUniform2fv(location, count, value);
        public void Uniform2fv(int location, int count, float[] value) => GL.glUniform2fv(location, count, value);
        public void Uniform2i(int location, int v0, int v1) => GL.glUniform2i(location, v0, v1);
        public void Uniform2iv(int location, int count, int* value) => GL.glUniform2iv(location, count, value);
        public void Uniform2iv(int location, int count, int[] value) => GL.glUniform2iv(location, count, value);
        public void Uniform2ui(int location, uint v0, uint v1) => GL.glUniform2ui(location, v0, v1);
        public void Uniform2uiv(int location, int count, uint* value) => GL.glUniform2uiv(location, count, value);
        public void Uniform2uiv(int location, int count, uint[] value) => GL.glUniform2uiv(location, count, value);
        public void Uniform3f(int location, float v0, float v1, float v2) => GL.glUniform3f(location, v0, v1, v2);
        public void Uniform3fv(int location, int count, float* value) => GL.glUniform3fv(location, count, value);
        public void Uniform3fv(int location, int count, float[] value) => GL.glUniform3fv(location, count, value);
        public void Uniform3i(int location, int v0, int v1, int v2) => GL.glUniform3i(location, v0, v1, v2);
        public void Uniform3iv(int location, int count, int* value) => GL.glUniform3iv(location, count, value);
        public void Uniform3iv(int location, int count, int[] value) => GL.glUniform3iv(location, count, value);
        public void Uniform3ui(int location, uint v0, uint v1, uint v2) => GL.glUniform3ui(location, v0, v1, v2);
        public void Uniform3uiv(int location, int count, uint[] value) => GL.glUniform3uiv(location, count, value);
        public void Uniform3uiv(int location, int count, uint* value) => GL.glUniform3uiv(location, count, value);
        public void Uniform4f(int location, float v0, float v1, float v2, float v3) => GL.glUniform4f(location, v0, v1, v2, v3);
        public void Uniform4fv(int location, int count, float* value) => GL.glUniform4fv(location, count, value);
        public void Uniform4fv(int location, int count, float[] value) => GL.glUniform4fv(location, count, value);
        public void Uniform4i(int location, int v0, int v1, int v2, int v3) => GL.glUniform4i(location, v0, v1, v2, v3);
        public void Uniform4iv(int location, int count, int* value) => GL.glUniform4iv(location, count, value);
        public void Uniform4iv(int location, int count, int[] value) => GL.glUniform4iv(location, count, value);
        public void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3) => GL.glUniform4ui(location, v0, v1, v2, v3);
        public void Uniform4uiv(int location, int count, uint[] value) => GL.glUniform4uiv(location, count, value);
        public void Uniform4uiv(int location, int count, uint* value) => GL.glUniform4uiv(location, count, value);
        public void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) => GL.glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        public void UniformMatrix2fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix2fv(location, count, transpose, value);
        public void UniformMatrix2fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix2fv(location, count, transpose, values);
        public void UniformMatrix2x3fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix2x3fv(location, count, transpose, value);
        public void UniformMatrix2x3fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix2x3fv(location, count, transpose, values);
        public void UniformMatrix2x4fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix2x4fv(location, count, transpose, value);
        public void UniformMatrix2x4fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix2x4fv(location, count, transpose, values);
        public void UniformMatrix3fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix3fv(location, count, transpose, value);
        public void UniformMatrix3fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix3fv(location, count, transpose, values);
        public void UniformMatrix3x2fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix3x2fv(location, count, transpose, value);
        public void UniformMatrix3x2fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix3x2fv(location, count, transpose, values);
        public void UniformMatrix3x4fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix3x4fv(location, count, transpose, value);
        public void UniformMatrix3x4fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix3x4fv(location, count, transpose, values);
        public void UniformMatrix4fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix4fv(location, count, transpose, value);
        public void UniformMatrix4fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix4fv(location, count, transpose, values);
        public void UniformMatrix4x2fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix4x2fv(location, count, transpose, value);
        public void UniformMatrix4x2fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix4x2fv(location, count, transpose, values);
        public void UniformMatrix4x3fv(int location, int count, bool transpose, float* value) => GL.glUniformMatrix4x3fv(location, count, transpose, value);
        public void UniformMatrix4x3fv(int location, int count, bool transpose, float[] values) => GL.glUniformMatrix4x3fv(location, count, transpose, values);
        public bool UnmapBuffer(int target) => GL.glUnmapBuffer(target);
        public void UseProgram(uint program) => GL.glUseProgram(program);
        public void ValidateProgram(uint program) => GL.glValidateProgram(program);
        public void VertexAttrib1d(uint index, double x) => GL.glVertexAttrib1d(index, x);
        public void VertexAttrib1dv(uint index, double* v) => GL.glVertexAttrib1dv(index, v);
        public void VertexAttrib1dv(uint index, double[] value) => GL.glVertexAttrib1dv(index, value);
        public void VertexAttrib1f(uint index, float x) => GL.glVertexAttrib1f(index, x);
        public void VertexAttrib1fv(uint index, float* v) => GL.glVertexAttrib1fv(index, v);
        public void VertexAttrib1fv(uint index, float[] value) => GL.glVertexAttrib1fv(index, value);
        public void VertexAttrib1s(uint index, short x) => GL.glVertexAttrib1s(index, x);
        public void VertexAttrib1sv(uint index, short* v) => GL.glVertexAttrib1sv(index, v);
        public void VertexAttrib1sv(uint index, short[] value) => GL.glVertexAttrib1sv(index, value);
        public void VertexAttrib2d(uint index, double x, double y) => GL.glVertexAttrib2d(index, x, y);
        public void VertexAttrib2dv(uint index, double* v) => GL.glVertexAttrib2dv(index, v);
        public void VertexAttrib2dv(uint index, double[] value) => GL.glVertexAttrib2dv(index, value);
        public void VertexAttrib2f(uint index, float x, float y) => GL.glVertexAttrib2f(index, x, y);
        public void VertexAttrib2fv(uint index, float* v) => GL.glVertexAttrib2fv(index, v);
        public void VertexAttrib2fv(uint index, float[] value) => GL.glVertexAttrib2fv(index, value);
        public void VertexAttrib2s(uint index, short x, short y) => GL.glVertexAttrib2s(index, x, y);
        public void VertexAttrib2sv(uint index, short* v) => GL.glVertexAttrib2sv(index, v);
        public void VertexAttrib2sv(uint index, short[] value) => GL.glVertexAttrib2sv(index, value);
        public void VertexAttrib3d(uint index, double x, double y, double z) => GL.glVertexAttrib3d(index, x, y, z);
        public void VertexAttrib3dv(uint index, double* v) => GL.glVertexAttrib3dv(index, v);
        public void VertexAttrib3dv(uint index, double[] value) => GL.glVertexAttrib3dv(index, value);
        public void VertexAttrib3f(uint index, float x, float y, float z) => GL.glVertexAttrib3f(index, x, y, z);
        public void VertexAttrib3fv(uint index, float* v) => GL.glVertexAttrib3fv(index, v);
        public void VertexAttrib3fv(uint index, float[] value) => GL.glVertexAttrib3fv(index, value);
        public void VertexAttrib3s(uint index, short x, short y, short z) => GL.glVertexAttrib3s(index, x, y, z);
        public void VertexAttrib3sv(uint index, short* v) => GL.glVertexAttrib3sv(index, v);
        public void VertexAttrib3sv(uint index, short[] value) => GL.glVertexAttrib3sv(index, value);
        public void VertexAttrib4bv(uint index, sbyte* v) => GL.glVertexAttrib4bv(index, v);
        public void VertexAttrib4bv(uint index, sbyte[] value) => GL.glVertexAttrib4bv(index, value);
        public void VertexAttrib4d(uint index, double x, double y, double z, double w) => GL.glVertexAttrib4d(index, x, y, z, w);
        public void VertexAttrib4dv(uint index, double* v) => GL.glVertexAttrib4dv(index, v);
        public void VertexAttrib4dv(uint index, double[] value) => GL.glVertexAttrib4dv(index, value);
        public void VertexAttrib4f(uint index, float x, float y, float z, float w) => GL.glVertexAttrib4f(index, x, y, z, w);
        public void VertexAttrib4fv(uint index, float* v) => GL.glVertexAttrib4fv(index, v);
        public void VertexAttrib4fv(uint index, float[] value) => GL.glVertexAttrib4fv(index, value);
        public void VertexAttrib4iv(uint index, int* v) => GL.glVertexAttrib4iv(index, v);
        public void VertexAttrib4iv(uint index, int[] value) => GL.glVertexAttrib4iv(index, value);
        public void VertexAttrib4Nbv(uint index, sbyte* v) => GL.glVertexAttrib4Nbv(index, v);
        public void VertexAttrib4Nbv(uint index, sbyte[] value) => GL.glVertexAttrib4Nbv(index, value);
        public void VertexAttrib4Niv(uint index, int* v) => GL.glVertexAttrib4Niv(index, v);
        public void VertexAttrib4Niv(uint index, int[] value) => GL.glVertexAttrib4Niv(index, value);
        public void VertexAttrib4Nsv(uint index, short* v) => GL.glVertexAttrib4Nsv(index, v);
        public void VertexAttrib4Nsv(uint index, short[] value) => GL.glVertexAttrib4Nsv(index, value);
        public void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w) => GL.glVertexAttrib4Nub(index, x, y, z, w);
        public void VertexAttrib4Nubv(uint index, byte[] value) => GL.glVertexAttrib4Nubv(index, value);
        public void VertexAttrib4Nubv(uint index, byte* v) => GL.glVertexAttrib4Nubv(index, v);
        public void VertexAttrib4Nuiv(uint index, uint[] value) => GL.glVertexAttrib4Nuiv(index, value);
        public void VertexAttrib4Nuiv(uint index, uint* v) => GL.glVertexAttrib4Nuiv(index, v);
        public void VertexAttrib4Nusv(uint index, ushort[] value) => GL.glVertexAttrib4Nusv(index, value);
        public void VertexAttrib4Nusv(uint index, ushort* v) => GL.glVertexAttrib4Nusv(index, v);
        public void VertexAttrib4s(uint index, short x, short y, short z, short w) => GL.glVertexAttrib4s(index, x, y, z, w);
        public void VertexAttrib4sv(uint index, short* v) => GL.glVertexAttrib4sv(index, v);
        public void VertexAttrib4sv(uint index, short[] value) => GL.glVertexAttrib4sv(index, value);
        public void VertexAttrib4ubv(uint index, byte* v) => GL.glVertexAttrib4ubv(index, v);
        public void VertexAttrib4ubv(uint index, byte[] value) => GL.glVertexAttrib4ubv(index, value);
        public void VertexAttrib4uiv(uint index, uint* v) => GL.glVertexAttrib4uiv(index, v);
        public void VertexAttrib4uiv(uint index, uint[] value) => GL.glVertexAttrib4uiv(index, value);
        public void VertexAttrib4usv(uint index, ushort* v) => GL.glVertexAttrib4usv(index, v);
        public void VertexAttrib4usv(uint index, ushort[] value) => GL.glVertexAttrib4usv(index, value);
        public void VertexAttribDivisor(uint index, uint divisor) => GL.glVertexAttribDivisor(index, divisor);
        public void VertexAttribI1i(uint index, int x) => GL.glVertexAttribI1i(index, x);
        public void VertexAttribI1iv(uint index, int* v) => GL.glVertexAttribI1iv(index, v);
        public void VertexAttribI1iv(uint index, int[] value) => GL.glVertexAttribI1iv(index, value);
        public void VertexAttribI1ui(uint index, uint x) => GL.glVertexAttribI1ui(index, x);
        public void VertexAttribI1uiv(uint index, uint* v) => GL.glVertexAttribI1uiv(index, v);
        public void VertexAttribI1uiv(uint index, uint[] value) => GL.glVertexAttribI1uiv(index, value);
        public void VertexAttribI2i(uint index, int x, int y) => GL.glVertexAttribI2i(index, x, y);
        public void VertexAttribI2iv(uint index, int* v) => GL.glVertexAttribI2iv(index, v);
        public void VertexAttribI2iv(uint index, int[] value) => GL.glVertexAttribI2iv(index, value);
        public void VertexAttribI2ui(uint index, uint x, uint y) => GL.glVertexAttribI2ui(index, x, y);
        public void VertexAttribI2uiv(uint index, uint* v) => GL.glVertexAttribI2uiv(index, v);
        public void VertexAttribI2uiv(uint index, uint[] value) => GL.glVertexAttribI2uiv(index, value);
        public void VertexAttribI3i(uint index, int x, int y, int z) => GL.glVertexAttribI3i(index, x, y, z);
        public void VertexAttribI3iv(uint index, int* v) => GL.glVertexAttribI3iv(index, v);
        public void VertexAttribI3iv(uint index, int[] value) => GL.glVertexAttribI3iv(index, value);
        public void VertexAttribI3ui(uint index, uint x, uint y, uint z) => GL.glVertexAttribI3ui(index, x, y, z);
        public void VertexAttribI3uiv(uint index, uint* v) => GL.glVertexAttribI3uiv(index, v);
        public void VertexAttribI3uiv(uint index, uint[] value) => GL.glVertexAttribI3uiv(index, value);
        public void VertexAttribI4bv(uint index, sbyte* v) => GL.glVertexAttribI4bv(index, v);
        public void VertexAttribI4bv(uint index, sbyte[] value) => GL.glVertexAttribI4bv(index, value);
        public void VertexAttribI4i(uint index, int x, int y, int z, int w) => GL.glVertexAttribI4i(index, x, y, z, w);
        public void VertexAttribI4iv(uint index, int* v) => GL.glVertexAttribI4iv(index, v);
        public void VertexAttribI4iv(uint index, int[] value) => GL.glVertexAttribI4iv(index, value);
        public void VertexAttribI4sv(uint index, short* v) => GL.glVertexAttribI4sv(index, v);
        public void VertexAttribI4sv(uint index, short[] value) => GL.glVertexAttribI4sv(index, value);
        public void VertexAttribI4ubv(uint index, byte* v) => GL.glVertexAttribI4ubv(index, v);
        public void VertexAttribI4ubv(uint index, byte[] value) => GL.glVertexAttribI4ubv(index, value);
        public void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) => GL.glVertexAttribI4ui(index, x, y, z, w);
        public void VertexAttribI4uiv(uint index, uint* v) => GL.glVertexAttribI4uiv(index, v);
        public void VertexAttribI4uiv(uint index, uint[] value) => GL.glVertexAttribI4uiv(index, value);
        public void VertexAttribI4usv(uint index, ushort* v) => GL.glVertexAttribI4usv(index, v);
        public void VertexAttribI4usv(uint index, ushort[] value) => GL.glVertexAttribI4usv(index, value);
        public void VertexAttribIPointer(uint index, int size, int type, int stride, void* pointer) => GL.glVertexAttribIPointer(index, size, type, stride, pointer);
        public void VertexAttribIPointer(uint index, int size, int type, int stride, IntPtr pointer) => GL.glVertexAttribIPointer(index, size, type, stride, pointer);
        public void VertexAttribP1ui(uint index, int type, bool normalized, uint value) => GL.glVertexAttribP1ui(index, type, normalized, value);
        public void VertexAttribP1uiv(uint index, int type, bool normalized, uint* value) => GL.glVertexAttribP1uiv(index, type, normalized, value);
        public void VertexAttribP1uiv(uint index, int type, bool normalized, uint[] value) => GL.glVertexAttribP1uiv(index, type, normalized, value);
        public void VertexAttribP2ui(uint index, int type, bool normalized, uint value) => GL.glVertexAttribP2ui(index, type, normalized, value);
        public void VertexAttribP2uiv(uint index, int type, bool normalized, uint* value) => GL.glVertexAttribP2uiv(index, type, normalized, value);
        public void VertexAttribP2uiv(uint index, int type, bool normalized, uint[] value) => GL.glVertexAttribP2uiv(index, type, normalized, value);
        public void VertexAttribP3ui(uint index, int type, bool normalized, uint value) => GL.glVertexAttribP3ui(index, type, normalized, value);
        public void VertexAttribP3uiv(uint index, int type, bool normalized, uint* value) => GL.glVertexAttribP3uiv(index, type, normalized, value);
        public void VertexAttribP3uiv(uint index, int type, bool normalized, uint[] value) => GL.glVertexAttribP3uiv(index, type, normalized, value);
        public void VertexAttribP4ui(uint index, int type, bool normalized, uint value) => GL.glVertexAttribP4ui(index, type, normalized, value);
        public void VertexAttribP4uiv(uint index, int type, bool normalized, uint* value) => GL.glVertexAttribP4uiv(index, type, normalized, value);
        public void VertexAttribP4uiv(uint index, int type, bool normalized, uint[] value) => GL.glVertexAttribP4uiv(index, type, normalized, value);
        public void VertexAttribPointer(uint index, int size, int type, bool normalized, int stride, void* pointer) => GL.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        public void VertexAttribPointer(uint index, int size, int type, bool normalized, int stride, IntPtr pointer) => GL.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        public void VertexP2ui(int type, uint value) => GL.glVertexP2ui(type, value);
        public void VertexP2uiv(int type, uint* value) => GL.glVertexP2uiv(type, value);
        public void VertexP2uiv(int type, uint[] value) => GL.glVertexP2uiv(type, value);
        public void VertexP3ui(int type, uint value) => GL.glVertexP3ui(type, value);
        public void VertexP3uiv(int type, uint* value) => GL.glVertexP3uiv(type, value);
        public void VertexP3uiv(int type, uint[] value) => GL.glVertexP3uiv(type, value);
        public void VertexP4ui(int type, uint value) => GL.glVertexP4ui(type, value);
        public void VertexP4uiv(int type, uint* value) => GL.glVertexP4uiv(type, value);
        public void VertexP4uiv(int type, uint[] value) => GL.glVertexP4uiv(type, value);
        public void Viewport(int x, int y, int width, int height) => GL.glViewport(x, y, width, height);
        public void WaitSync(IntPtr sync, uint flags, ulong timeout) => GL.glWaitSync(sync, flags, timeout);
        public void Import(GetProcAddressHandler loader) => GL.Import(loader);

    }
}
